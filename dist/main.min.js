"use strict";function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(e.document)return t(e);throw new Error("jQuery requires a window with a document")}:t(e)}("undefined"!=typeof window?window:void 0,function(w,H){function y(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item}function g(e){return null!=e&&e===e.window}var t=[],N=Object.getPrototypeOf,a=t.slice,_=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},F=t.push,O=t.indexOf,z={},R=z.toString,B=z.hasOwnProperty,W=B.toString,X=W.call(Object),m={},S=w.document,Y={type:!0,src:!0,nonce:!0,noModule:!0};function V(e,t,n){var o,i,r=(n=n||S).createElement("script");if(r.text=e,t)for(o in Y)(i=t[o]||t.getAttribute&&t.getAttribute(o))&&r.setAttribute(o,i);n.head.appendChild(r).parentNode.removeChild(r)}function h(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?z[R.call(e)]||"object":_typeof(e)}var e="3.6.1",C=function e(t,n){return new e.fn.init(t,n)};function U(e){var t=!!e&&"length"in e&&e.length,n=h(e);return!y(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}C.fn=C.prototype={jquery:e,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){e=C.merge(this.constructor(),e);return e.prevObject=this,e},each:function(e){return C.each(this,e)},map:function(n){return this.pushStack(C.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(C.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:F,sort:t.sort,splice:t.splice},C.extend=C.fn.extend=function(){var e,t,n,o,i,r=arguments[0]||{},s=1,a=arguments.length,l=!1;for("boolean"==typeof r&&(l=r,r=arguments[s]||{},s++),"object"===_typeof(r)||y(r)||(r={}),s===a&&(r=this,s--);s<a;s++)if(null!=(e=arguments[s]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(l&&n&&(C.isPlainObject(n)||(o=Array.isArray(n)))?(i=r[t],i=o&&!Array.isArray(i)?[]:o||C.isPlainObject(i)?i:{},o=!1,r[t]=C.extend(l,i,n)):void 0!==n&&(r[t]=n));return r},C.extend({expando:"jQuery"+(e+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){return!(!e||"[object Object]"!==R.call(e))&&(!(e=N(e))||"function"==typeof(e=B.call(e,"constructor")&&e.constructor)&&W.call(e)===X)},isEmptyObject:function(e){for(var t in e)return!1;return!0},globalEval:function(e,t,n){V(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,o=0;if(U(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},makeArray:function(e,t){t=t||[];return null!=e&&(U(Object(e))?C.merge(t,"string"==typeof e?[e]:e):F.call(t,e)),t},inArray:function(e,t,n){return null==t?-1:O.call(t,e,n)},merge:function(e,t){for(var n=+t.length,o=0,i=e.length;o<n;o++)e[i++]=t[o];return e.length=i,e},grep:function(e,t,n){for(var o=[],i=0,r=e.length,s=!n;i<r;i++)!t(e[i],i)!=s&&o.push(e[i]);return o},map:function(e,t,n){var o,i,r=0,s=[];if(U(e))for(o=e.length;r<o;r++)null!=(i=t(e[r],r,n))&&s.push(i);else for(r in e)null!=(i=t(e[r],r,n))&&s.push(i);return _(s)},guid:1,support:m}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=t[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){z["[object "+t+"]"]=t.toLowerCase()});function o(e,t,n){for(var o=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&C(e).is(n))break;o.push(e)}return o}function Z(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var e=function(H){function d(e,t){return e="0x"+e.slice(1)-65536,t||(e<0?String.fromCharCode(65536+e):String.fromCharCode(e>>10|55296,1023&e|56320))}function N(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}function _(){S()}var e,p,x,r,F,f,O,z,w,l,c,S,C,n,T,h,o,i,g,E="sizzle"+ +new Date,u=H.document,$=0,R=0,B=L(),W=L(),X=L(),m=L(),Y=function(e,t){return e===t&&(c=!0),0},V={}.hasOwnProperty,t=[],U=t.pop,Z=t.push,k=t.push,Q=t.slice,y=function(e,t){for(var n=0,o=e.length;n<o;n++)if(e[n]===t)return n;return-1},G="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",s="[\\x20\\t\\r\\n\\f]",a="(?:\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",K="\\["+s+"*("+a+")(?:"+s+"*([*^$|!~]?=)"+s+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+a+"))|)"+s+"*\\]",J=":("+a+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+K+")*)|.*)\\)|)",ee=new RegExp(s+"+","g"),v=new RegExp("^"+s+"+|((?:^|[^\\\\])(?:\\\\.)*)"+s+"+$","g"),te=new RegExp("^"+s+"*,"+s+"*"),ne=new RegExp("^"+s+"*([>+~]|"+s+")"+s+"*"),oe=new RegExp(s+"|>"),ie=new RegExp(J),re=new RegExp("^"+a+"$"),b={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a+"|[*])"),ATTR:new RegExp("^"+K),PSEUDO:new RegExp("^"+J),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+s+"*(even|odd|(([+-]|)(\\d*)n|)"+s+"*(?:([+-]|)"+s+"*(\\d+)|))"+s+"*\\)|)","i"),bool:new RegExp("^(?:"+G+")$","i"),needsContext:new RegExp("^"+s+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+s+"*((?:-\\d)?\\d*)"+s+"*\\)|)(?=[^-]|$)","i")},se=/HTML$/i,ae=/^(?:input|select|textarea|button)$/i,le=/^h\d$/i,P=/^[^{]+\{\s*\[native \w/,ce=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ue=/[+~]/,A=new RegExp("\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\([^\\r\\n\\f])","g"),de=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,pe=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{k.apply(t=Q.call(u.childNodes),u.childNodes),t[u.childNodes.length].nodeType}catch(e){k={apply:t.length?function(e,t){Z.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,o=0;e[n++]=t[o++];);e.length=n-1}}}function D(t,e,n,o){var i,r,s,a,l,c,u=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!o&&(S(e),e=e||C,T)){if(11!==d&&(a=ce.exec(t)))if(i=a[1]){if(9===d){if(!(c=e.getElementById(i)))return n;if(c.id===i)return n.push(c),n}else if(u&&(c=u.getElementById(i))&&g(e,c)&&c.id===i)return n.push(c),n}else{if(a[2])return k.apply(n,e.getElementsByTagName(t)),n;if((i=a[3])&&p.getElementsByClassName&&e.getElementsByClassName)return k.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!m[t+" "]&&!(h&&h.test(t)||1===d&&"object"===e.nodeName.toLowerCase())){if(c=t,u=e,1===d&&(oe.test(t)||ne.test(t))){for((u=ue.test(t)&&me(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute("id"))?s=s.replace(de,N):e.setAttribute("id",s=E)),r=(l=f(t)).length;r--;)l[r]=(s?"#"+s:":scope")+" "+q(l[r]);c=l.join(",")}try{return k.apply(n,u.querySelectorAll(c)),n}catch(e){m(t,!0)}finally{s===E&&e.removeAttribute("id")}}}return z(t.replace(v,"$1"),e,n,o)}function L(){var n=[];function o(e,t){return n.push(e+" ")>x.cacheLength&&delete o[n.shift()],o[e+" "]=t}return o}function M(e){return e[E]=!0,e}function I(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t)}}function fe(e,t){for(var n=e.split("|"),o=n.length;o--;)x.attrHandle[n[o]]=t}function he(e,t){var n=t&&e,o=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(o)return o;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&pe(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function j(s){return M(function(r){return r=+r,M(function(e,t){for(var n,o=s([],e.length,r),i=o.length;i--;)e[n=o[i]]&&(e[n]=!(t[n]=e[n]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=D.support={},F=D.isXML=function(e){var t=e&&e.namespaceURI,e=e&&(e.ownerDocument||e).documentElement;return!se.test(t||e&&e.nodeName||"HTML")},S=D.setDocument=function(e){var e=e?e.ownerDocument||e:u;return e!=C&&9===e.nodeType&&e.documentElement&&(n=(C=e).documentElement,T=!F(C),u!=C&&(e=C.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",_,!1):e.attachEvent&&e.attachEvent("onunload",_)),p.scope=I(function(e){return n.appendChild(e).appendChild(C.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),p.attributes=I(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=I(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=P.test(C.getElementsByClassName),p.getById=I(function(e){return n.appendChild(e).id=E,!C.getElementsByName||!C.getElementsByName(E).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(A,d);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&T)return(t=t.getElementById(e))?[t]:[]}):(x.filter.ID=function(e){var t=e.replace(A,d);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var n,o,i,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(i=t.getElementsByName(e),o=0;r=i[o++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,o=[],i=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[i++];)1===n.nodeType&&o.push(n);return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&T)return t.getElementsByClassName(e)},o=[],h=[],(p.qsa=P.test(C.querySelectorAll))&&(I(function(e){var t;n.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]="+s+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||h.push("\\["+s+"*(?:value|"+G+")"),e.querySelectorAll("[id~="+E+"-]").length||h.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||h.push("\\["+s+"*name"+s+"*="+s+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||h.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||h.push(".#.+[+~]"),e.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")}),I(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&h.push("name"+s+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),n.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")})),(p.matchesSelector=P.test(i=n.matches||n.webkitMatchesSelector||n.mozMatchesSelector||n.oMatchesSelector||n.msMatchesSelector))&&I(function(e){p.disconnectedMatch=i.call(e,"*"),i.call(e,"[s!='']:x"),o.push("!=",J)}),h=h.length&&new RegExp(h.join("|")),o=o.length&&new RegExp(o.join("|")),e=P.test(n.compareDocumentPosition),g=e||P.test(n.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=e?function(e,t){var n;return e===t?(c=!0,0):(n=!e.compareDocumentPosition-!t.compareDocumentPosition)||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==u&&g(u,e)?-1:t==C||t.ownerDocument==u&&g(u,t)?1:l?y(l,e)-y(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,o=0,i=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!i||!r)return e==C?-1:t==C?1:i?-1:r?1:l?y(l,e)-y(l,t):0;if(i===r)return he(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[o]===a[o];)o++;return o?he(s[o],a[o]):s[o]==u?-1:a[o]==u?1:0}),C},D.matches=function(e,t){return D(e,null,null,t)},D.matchesSelector=function(e,t){if(S(e),p.matchesSelector&&T&&!m[t+" "]&&!(o&&o.test(t)||h&&h.test(t)))try{var n=i.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){m(t,!0)}return 0<D(t,C,null,[e]).length},D.contains=function(e,t){return(e.ownerDocument||e)!=C&&S(e),g(e,t)},D.attr=function(e,t){(e.ownerDocument||e)!=C&&S(e);var n=x.attrHandle[t.toLowerCase()],n=n&&V.call(x.attrHandle,t.toLowerCase())?n(e,t,!T):void 0;return void 0!==n?n:p.attributes||!T?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},D.escape=function(e){return(e+"").replace(de,N)},D.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},D.uniqueSort=function(e){var t,n=[],o=0,i=0;if(c=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(Y),c){for(;t=e[i++];)t===e[i]&&(o=n.push(i));for(;o--;)e.splice(n[o],1)}return l=null,e},r=D.getText=function(e){var t,n="",o=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[o++];)n+=r(t);return n},(x=D.selectors={cacheLength:50,createPseudo:M,match:b,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(A,d),e[3]=(e[3]||e[4]||e[5]||"").replace(A,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||D.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&D.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return b.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ie.test(n)&&(t=(t=f(n,!0))&&n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(A,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=B[e+" "];return t||(t=new RegExp("(^|"+s+")"+e+"("+s+"|$)"))&&B(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,o){return function(e){e=D.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===o:"!="===n?e!==o:"^="===n?o&&0===e.indexOf(o):"*="===n?o&&-1<e.indexOf(o):"$="===n?o&&e.slice(-o.length)===o:"~="===n?-1<(" "+e.replace(ee," ")+" ").indexOf(o):"|="===n&&(e===o||e.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,e,t,g,m){var v="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===e;return 1===g&&0===m?function(e){return!!e.parentNode}:function(e,t,n){var o,i,r,s,a,l,c=v!=y?"nextSibling":"previousSibling",u=e.parentNode,d=b&&e.nodeName.toLowerCase(),p=!n&&!b,f=!1;if(u){if(v){for(;c;){for(s=e;s=s[c];)if(b?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&p){for(f=(a=(o=(i=(r=(s=u)[E]||(s[E]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===$&&o[1])&&o[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(f=a=0,l.pop());)if(1===s.nodeType&&++f&&s===e){i[h]=[$,a,f];break}}else if(!1===(f=p?a=(o=(i=(r=(s=e)[E]||(s[E]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===$&&o[1]:f))for(;(s=++a&&s&&s[c]||(f=a=0,l.pop()))&&((b?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((i=(r=s[E]||(s[E]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[$,f]),s!==e)););return(f-=m)===g||f%g==0&&0<=f/g}}},PSEUDO:function(e,r){var t,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||D.error("unsupported pseudo: "+e);return s[E]?s(r):1<s.length?(t=[e,e,"",r],x.setFilters.hasOwnProperty(e.toLowerCase())?M(function(e,t){for(var n,o=s(e,r),i=o.length;i--;)e[n=y(e,o[i])]=!(t[n]=o[i])}):function(e){return s(e,0,t)}):s}},pseudos:{not:M(function(e){var o=[],i=[],a=O(e.replace(v,"$1"));return a[E]?M(function(e,t,n,o){for(var i,r=a(e,null,o,[]),s=e.length;s--;)(i=r[s])&&(e[s]=!(t[s]=i))}):function(e,t,n){return o[0]=e,a(o,null,n,i),o[0]=null,!i.pop()}}),has:M(function(t){return function(e){return 0<D(t,e).length}}),contains:M(function(t){return t=t.replace(A,d),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:M(function(n){return re.test(n||"")||D.error("unsupported lang: "+n),n=n.replace(A,d).toLowerCase(),function(e){var t;do{if(t=T?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=H.location&&H.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===n},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return le.test(e.nodeName)},input:function(e){return ae.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:j(function(){return[0]}),last:j(function(e,t){return[t-1]}),eq:j(function(e,t,n){return[n<0?n+t:n]}),even:j(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:j(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:j(function(e,t,n){for(var o=n<0?n+t:t<n?t:n;0<=--o;)e.push(o);return e}),gt:j(function(e,t,n){for(var o=n<0?n+t:n;++o<t;)e.push(o);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function ve(){}function q(e){for(var t=0,n=e.length,o="";t<n;t++)o+=e[t].value;return o}function ye(s,e,t){var a=e.dir,l=e.next,c=l||a,u=t&&"parentNode"===c,d=R++;return e.first?function(e,t,n){for(;e=e[a];)if(1===e.nodeType||u)return s(e,t,n);return!1}:function(e,t,n){var o,i,r=[$,d];if(n){for(;e=e[a];)if((1===e.nodeType||u)&&s(e,t,n))return!0}else for(;e=e[a];)if(1===e.nodeType||u)if(i=(i=e[E]||(e[E]={}))[e.uniqueID]||(i[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[a]||e;else{if((o=i[c])&&o[0]===$&&o[1]===d)return r[2]=o[2];if((i[c]=r)[2]=s(e,t,n))return!0}return!1}}function be(i){return 1<i.length?function(e,t,n){for(var o=i.length;o--;)if(!i[o](e,t,n))return!1;return!0}:i[0]}function xe(e,t,n,o,i){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)!(r=e[a])||n&&!n(r,o,i)||(s.push(r),c&&t.push(a));return s}function we(f,h,g,m,v,e){return m&&!m[E]&&(m=we(m)),v&&!v[E]&&(v=we(v,e)),M(function(e,t,n,o){var i,r,s,a=[],l=[],c=t.length,u=e||function(e,t,n){for(var o=0,i=t.length;o<i;o++)D(e,t[o],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!e&&h?u:xe(u,a,f,n,o),p=g?v||(e?f:c||m)?[]:t:d;if(g&&g(d,p,n,o),m)for(i=xe(p,l),m(i,[],n,o),r=i.length;r--;)(s=i[r])&&(p[l[r]]=!(d[l[r]]=s));if(e){if(v||f){if(v){for(i=[],r=p.length;r--;)(s=p[r])&&i.push(d[r]=s);v(null,p=[],i,o)}for(r=p.length;r--;)(s=p[r])&&-1<(i=v?y(e,s):a[r])&&(e[i]=!(t[i]=s))}}else p=xe(p===t?p.splice(c,p.length):p),v?v(null,t,p,o):k.apply(t,p)})}function Se(m,v){function e(e,t,n,o,i){var r,s,a,l=0,c="0",u=e&&[],d=[],p=w,f=e||b&&x.find.TAG("*",i),h=$+=null==p?1:Math.random()||.1,g=f.length;for(i&&(w=t==C||t||i);c!==g&&null!=(r=f[c]);c++){if(b&&r){for(s=0,t||r.ownerDocument==C||(S(r),n=!T);a=m[s++];)if(a(r,t||C,n)){o.push(r);break}i&&($=h)}y&&((r=!a&&r)&&l--,e&&u.push(r))}if(l+=c,y&&c!==l){for(s=0;a=v[s++];)a(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=U.call(o));d=xe(d)}k.apply(o,d),i&&!e&&0<d.length&&1<l+v.length&&D.uniqueSort(o)}return i&&($=h,w=p),u}var y=0<v.length,b=0<m.length;return y?M(e):e}return ve.prototype=x.filters=x.pseudos,x.setFilters=new ve,f=D.tokenize=function(e,t){var n,o,i,r,s,a,l,c=W[e+" "];if(c)return t?0:c.slice(0);for(s=e,a=[],l=x.preFilter;s;){for(r in n&&!(o=te.exec(s))||(o&&(s=s.slice(o[0].length)||s),a.push(i=[])),n=!1,(o=ne.exec(s))&&(n=o.shift(),i.push({value:n,type:o[0].replace(v," ")}),s=s.slice(n.length)),x.filter)!(o=b[r].exec(s))||l[r]&&!(o=l[r](o))||(n=o.shift(),i.push({value:n,type:r,matches:o}),s=s.slice(n.length));if(!n)break}return t?s.length:s?D.error(e):W(e,a).slice(0)},O=D.compile=function(e,t){var n,o=[],i=[],r=X[e+" "];if(!r){for(n=(t=t||f(e)).length;n--;)((r=function e(t){for(var o,n,i,r=t.length,s=x.relative[t[0].type],a=s||x.relative[" "],l=s?1:0,c=ye(function(e){return e===o},a,!0),u=ye(function(e){return-1<y(o,e)},a,!0),d=[function(e,t,n){return e=!s&&(n||t!==w)||((o=t).nodeType?c:u)(e,t,n),o=null,e}];l<r;l++)if(n=x.relative[t[l].type])d=[ye(be(d),n)];else{if((n=x.filter[t[l].type].apply(null,t[l].matches))[E]){for(i=++l;i<r&&!x.relative[t[i].type];i++);return we(1<l&&be(d),1<l&&q(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(v,"$1"),n,l<i&&e(t.slice(l,i)),i<r&&e(t=t.slice(i)),i<r&&q(t))}d.push(n)}return be(d)}(t[n]))[E]?o:i).push(r);(r=X(e,Se(i,o))).selector=e}return r},z=D.select=function(e,t,n,o){var i,r,s,a,l,c="function"==typeof e&&e,u=!o&&f(e=c.selector||e);if(n=n||[],1===u.length){if(2<(r=u[0]=u[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===t.nodeType&&T&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(A,d),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(i=b.needsContext.test(e)?0:r.length;i--&&(s=r[i],!x.relative[a=s.type]);)if((l=x.find[a])&&(o=l(s.matches[0].replace(A,d),ue.test(r[0].type)&&me(t.parentNode)||t))){if(r.splice(i,1),e=o.length&&q(r))break;return k.apply(n,o),n}}return(c||O(e,u))(o,t,!T,n,!t||ue.test(e)&&me(t.parentNode)||t),n},p.sortStable=E.split("").sort(Y).join("")===E,p.detectDuplicates=!!c,S(),p.sortDetached=I(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),I(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&I(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),I(function(e){return null==e.getAttribute("disabled")})||fe(G,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),D}(w),Q=(C.find=e,C.expr=e.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=e.uniqueSort,C.text=e.getText,C.isXMLDoc=e.isXML,C.contains=e.contains,C.escapeSelector=e.escape,C.expr.match.needsContext);function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var G=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function K(e,n,o){return y(n)?C.grep(e,function(e,t){return!!n.call(e,t,e)!==o}):n.nodeType?C.grep(e,function(e){return e===n!==o}):"string"!=typeof n?C.grep(e,function(e){return-1<O.call(n,e)!==o}):C.filter(n,e,o)}C.filter=function(e,t,n){var o=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===o.nodeType?C.find.matchesSelector(o,e)?[o]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,o=this.length,i=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<o;t++)if(C.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<o;t++)C.find(e,i[t],n);return 1<o?C.uniqueSort(n):n},filter:function(e){return this.pushStack(K(this,e||[],!1))},not:function(e){return this.pushStack(K(this,e||[],!0))},is:function(e){return!!K(this,"string"==typeof e&&Q.test(e)?C(e):e||[],!1).length}});var J,ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,te=((C.fn.init=function(e,t,n){if(e){if(n=n||J,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this);if(!(o="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:ee.exec(e))||!o[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(o[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(o[1],t&&t.nodeType?t.ownerDocument||t:S,!0)),G.test(o[1])&&C.isPlainObject(t))for(var o in t)y(this[o])?this[o](t[o]):this.attr(o,t[o])}else(n=S.getElementById(o[2]))&&(this[0]=n,this.length=1)}return this}).prototype=C.fn,J=C(S),/^(?:parents|prev(?:Until|All))/),ne={children:!0,contents:!0,next:!0,prev:!0};function oe(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,o=0,i=this.length,r=[],s="string"!=typeof e&&C(e);if(!Q.test(e))for(;o<i;o++)for(n=this[o];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&C.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?C.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?O.call(C(e),this[0]):O.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},parents:function(e){return o(e,"parentNode")},parentsUntil:function(e,t,n){return o(e,"parentNode",n)},next:function(e){return oe(e,"nextSibling")},prev:function(e){return oe(e,"previousSibling")},nextAll:function(e){return o(e,"nextSibling")},prevAll:function(e){return o(e,"previousSibling")},nextUntil:function(e,t,n){return o(e,"nextSibling",n)},prevUntil:function(e,t,n){return o(e,"previousSibling",n)},siblings:function(e){return Z((e.parentNode||{}).firstChild,e)},children:function(e){return Z(e.firstChild)},contents:function(e){return null!=e.contentDocument&&N(e.contentDocument)?e.contentDocument:(l(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(o,i){C.fn[o]=function(e,t){var n=C.map(this,i,e);return(t="Until"!==o.slice(-5)?e:t)&&"string"==typeof t&&(n=C.filter(t,n)),1<this.length&&(ne[o]||C.uniqueSort(n),te.test(o)&&n.reverse()),this.pushStack(n)}});var T=/[^\x20\t\r\n\f]+/g;function u(e){return e}function ie(e){throw e}function re(e,t,n,o){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(o))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(o){var e,n;o="string"==typeof o?(e=o,n={},C.each(e.match(T)||[],function(e,t){n[t]=!0}),n):C.extend({},o);function i(){for(a=a||o.once,s=r=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&o.stopOnFalse&&(u=l.length,t=!1);o.memory||(t=!1),r=!1,a&&(l=t?[]:"")}var r,t,s,a,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!r&&(u=l.length-1,c.push(t)),function n(e){C.each(e,function(e,t){y(t)?o.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==h(t)&&n(t)})}(arguments),t&&!r&&i()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;-1<(n=C.inArray(t,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<C.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=c=[],t||r||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),r||i()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},C.extend({Deferred:function(e){var r=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var i=arguments;return C.Deferred(function(o){C.each(r,function(e,t){var n=y(i[t[4]])&&i[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&y(e.promise)?e.promise().progress(o.notify).done(o.resolve).fail(o.reject):o[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,o){var l=0;function c(i,r,s,a){return function(){function e(){var e,t;if(!(i<l)){if((e=s.apply(n,o))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,y(t)?a?t.call(e,c(l,r,u,a),c(l,r,ie,a)):(l++,t.call(e,c(l,r,u,a),c(l,r,ie,a),c(l,r,u,r.notifyWith))):(s!==u&&(n=void 0,o=[e]),(a||r.resolveWith)(n,o))}}var n=this,o=arguments,t=a?e:function(){try{e()}catch(e){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(s!==ie&&(n=void 0,o=[e]),r.rejectWith(n,o))}};i?t():(C.Deferred.getStackHook&&(t.stackTrace=C.Deferred.getStackHook()),w.setTimeout(t))}}return C.Deferred(function(e){r[0][3].add(c(0,e,y(o)?o:u,e.notifyWith)),r[1][3].add(c(0,e,y(t)?t:u)),r[2][3].add(c(0,e,y(n)?n:ie))}).promise()},promise:function(e){return null!=e?C.extend(e,s):s}},a={};return C.each(r,function(e,t){var n=t[2],o=t[5];s[t[1]]=n.add,o&&n.add(function(){i=o},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){i[t]=this,r[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(i,r)}}var n=arguments.length,o=n,i=Array(o),r=a.call(arguments),s=C.Deferred();if(n<=1&&(re(e,s.done(t(o)).resolve,s.reject,!n),"pending"===s.state()||y(r[o]&&r[o].then)))return s.then();for(;o--;)re(r[o],t(o),s.reject);return s.promise()}});var se=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/,ae=(C.Deferred.exceptionHook=function(e,t){w.console&&w.console.warn&&e&&se.test(e.name)&&w.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){w.setTimeout(function(){throw e})},C.Deferred());function le(){S.removeEventListener("DOMContentLoaded",le),w.removeEventListener("load",le),C.ready()}C.fn.ready=function(e){return ae.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0)!==e&&0<--C.readyWait||ae.resolveWith(S,[C])}}),C.ready.then=ae.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?w.setTimeout(C.ready):(S.addEventListener("DOMContentLoaded",le),w.addEventListener("load",le));function d(e,t,n,o,i,r,s){var a=0,l=e.length,c=null==n;if("object"===h(n))for(a in i=!0,n)d(e,t,a,n[a],!0,r,s);else if(void 0!==o&&(i=!0,y(o)||(s=!0),t=c?s?(t.call(e,o),null):(c=t,function(e,t,n){return c.call(C(e),n)}):t))for(;a<l;a++)t(e[a],n,s?o:o.call(e[a],a,t(e[a],n)));return i?e:c?t.call(e):l?t(e[0],n):r}var ce=/^-ms-/,ue=/-([a-z])/g;function de(e,t){return t.toUpperCase()}function b(e){return e.replace(ce,"ms-").replace(ue,de)}function v(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function pe(){this.expando=C.expando+pe.uid++}pe.uid=1,pe.prototype={cache:function(e){var t=e[this.expando];return t||(t={},v(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var o,i=this.cache(e);if("string"==typeof t)i[b(t)]=n;else for(o in t)i[b(o)]=t[o];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][b(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,o=e[this.expando];if(void 0!==o){if(void 0!==t){n=(t=Array.isArray(t)?t.map(b):(t=b(t))in o?[t]:t.match(T)||[]).length;for(;n--;)delete o[t[n]]}void 0!==t&&!C.isEmptyObject(o)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){e=e[this.expando];return void 0!==e&&!C.isEmptyObject(e)}};var x=new pe,c=new pe,fe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,he=/[A-Z]/g;function ge(e,t,n){var o,i;if(void 0===n&&1===e.nodeType)if(o="data-"+t.replace(he,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(o))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:fe.test(i)?JSON.parse(i):i)}catch(e){}c.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return c.hasData(e)||x.hasData(e)},data:function(e,t,n){return c.access(e,t,n)},removeData:function(e,t){c.remove(e,t)},_data:function(e,t,n){return x.access(e,t,n)},_removeData:function(e,t){x.remove(e,t)}}),C.fn.extend({data:function(n,e){var t,o,i,r=this[0],s=r&&r.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){c.set(this,n)}):d(this,function(e){var t;if(r&&void 0===e)return void 0!==(t=c.get(r,n))||void 0!==(t=ge(r,n))?t:void 0;this.each(function(){c.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=c.get(r),1===r.nodeType&&!x.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(o=s[t].name).indexOf("data-")&&(o=b(o.slice(5)),ge(r,o,i[o]));x.set(r,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){c.remove(this,e)})}}),C.extend({queue:function(e,t,n){var o;if(e)return o=x.get(e,t=(t||"fx")+"queue"),n&&(!o||Array.isArray(n)?o=x.access(e,t,C.makeArray(n)):o.push(n)),o||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),o=n.length,i=n.shift(),r=C._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),o--),i&&("fx"===t&&n.unshift("inprogress"),delete r.stop,i.call(e,function(){C.dequeue(e,t)},r)),!o&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return x.get(e,n)||x.access(e,n,{empty:C.Callbacks("once memory").add(function(){x.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?C.queue(this[0],t):void 0===n?this:this.each(function(){var e=C.queue(this,t,n);C._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&C.dequeue(this,t)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||r.resolveWith(s,[s])}var o,i=1,r=C.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(o=x.get(s[a],e+"queueHooks"))&&o.empty&&(i++,o.empty.add(n));return n(),r.promise(t)}});function me(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&$(e)&&"none"===C.css(e,"display")}var e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ve=new RegExp("^(?:([+-])=|)("+e+")([a-z%]*)$","i"),p=["Top","Right","Bottom","Left"],E=S.documentElement,$=function(e){return C.contains(e.ownerDocument,e)},ye={composed:!0};E.getRootNode&&($=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(ye)===e.ownerDocument});function be(e,t,n,o){var i,r,s=20,a=o?function(){return o.cur()}:function(){return C.css(e,t,"")},l=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),u=e.nodeType&&(C.cssNumber[t]||"px"!==c&&+l)&&ve.exec(C.css(e,t));if(u&&u[3]!==c){for(c=c||u[3],u=+(l/=2)||1;s--;)C.style(e,t,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;C.style(e,t,(u*=2)+c),n=n||[]}return n&&(u=+u||+l||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],o&&(o.unit=c,o.start=u,o.end=i)),i}var xe={};function k(e,t){for(var n,o,i,r,s,a=[],l=0,c=e.length;l<c;l++)(o=e[l]).style&&(n=o.style.display,t?("none"===n&&(a[l]=x.get(o,"display")||null,a[l]||(o.style.display="")),""===o.style.display&&me(o)&&(a[l]=(s=r=void 0,r=(i=o).ownerDocument,i=i.nodeName,(s=xe[i])||(r=r.body.appendChild(r.createElement(i)),s=C.css(r,"display"),r.parentNode.removeChild(r),xe[i]=s="none"===s?"block":s),s))):"none"!==n&&(a[l]="none",x.set(o,"display",n)));for(l=0;l<c;l++)null!=a[l]&&(e[l].style.display=a[l]);return e}C.fn.extend({show:function(){return k(this,!0)},hide:function(){return k(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){me(this)?C(this).show():C(this).hide()})}});var we=/^(?:checkbox|radio)$/i,Se=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ce=/^$|^module$|\/(?:java|ecma)script/i,P=(M=S.createDocumentFragment().appendChild(S.createElement("div")),(r=S.createElement("input")).setAttribute("type","radio"),r.setAttribute("checked","checked"),r.setAttribute("name","t"),M.appendChild(r),m.checkClone=M.cloneNode(!0).cloneNode(!0).lastChild.checked,M.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!M.cloneNode(!0).lastChild.defaultValue,M.innerHTML="<option></option>",m.option=!!M.lastChild,{thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]});function A(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&l(e,t)?C.merge([e],n):n}function Te(e,t){for(var n=0,o=e.length;n<o;n++)x.set(e[n],"globalEval",!t||x.get(t[n],"globalEval"))}P.tbody=P.tfoot=P.colgroup=P.caption=P.thead,P.th=P.td,m.option||(P.optgroup=P.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function $e(e,t,n,o,i){for(var r,s,a,l,c,u=t.createDocumentFragment(),d=[],p=0,f=e.length;p<f;p++)if((r=e[p])||0===r)if("object"===h(r))C.merge(d,r.nodeType?[r]:r);else if(Ee.test(r)){for(s=s||u.appendChild(t.createElement("div")),a=(Se.exec(r)||["",""])[1].toLowerCase(),a=P[a]||P._default,s.innerHTML=a[1]+C.htmlPrefilter(r)+a[2],c=a[0];c--;)s=s.lastChild;C.merge(d,s.childNodes),(s=u.firstChild).textContent=""}else d.push(t.createTextNode(r));for(u.textContent="",p=0;r=d[p++];)if(o&&-1<C.inArray(r,o))i&&i.push(r);else if(l=$(r),s=A(u.appendChild(r),"script"),l&&Te(s),n)for(c=0;r=s[c++];)Ce.test(r.type||"")&&n.push(r);return u}var ke=/^([^.]*)(?:\.(.+)|)/;function n(){return!0}function f(){return!1}function Pe(e,t){return e===function(){try{return S.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,o,i,r){var s,a;if("object"===_typeof(t)){for(a in"string"!=typeof n&&(o=o||n,n=void 0),t)Ae(e,a,n,o,t[a],r);return e}if(null==o&&null==i?(i=n,o=n=void 0):null==i&&("string"==typeof n?(i=o,o=void 0):(i=o,o=n,n=void 0)),!1===i)i=f;else if(!i)return e;return 1===r&&(s=i,(i=function(e){return C().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=C.guid++)),e.each(function(){C.event.add(this,t,i,o,n)})}function De(e,i,r){r?(x.set(e,i,!1),C.event.add(e,i,{namespace:!1,handler:function(e){var t,n,o=x.get(this,i);if(1&e.isTrigger&&this[i]){if(o.length)(C.event.special[i]||{}).delegateType&&e.stopPropagation();else if(o=a.call(arguments),x.set(this,i,o),t=r(this,i),this[i](),o!==(n=x.get(this,i))||t?x.set(this,i,!1):n={},o!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else o.length&&(x.set(this,i,{value:C.event.trigger(C.extend(o[0],C.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===x.get(e,i)&&C.event.add(e,i,n)}C.event={global:{},add:function(t,e,n,o,i){var r,s,a,l,c,u,d,p,f,h=x.get(t);if(v(t))for(n.handler&&(n=(r=n).handler,i=r.selector),i&&C.find.matchesSelector(E,i),n.guid||(n.guid=C.guid++),a=(a=h.events)||(h.events=Object.create(null)),s=(s=h.handle)||(h.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(T)||[""]).length;l--;)d=f=(p=ke.exec(e[l])||[])[1],p=(p[2]||"").split(".").sort(),d&&(c=C.event.special[d]||{},d=(i?c.delegateType:c.bindType)||d,c=C.event.special[d]||{},f=C.extend({type:d,origType:f,data:o,handler:n,guid:n.guid,selector:i,needsContext:i&&C.expr.match.needsContext.test(i),namespace:p.join(".")},r),(u=a[d])||((u=a[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,o,p,s)||t.addEventListener&&t.addEventListener(d,s)),c.add&&(c.add.call(t,f),f.handler.guid||(f.handler.guid=n.guid)),i?u.splice(u.delegateCount++,0,f):u.push(f),C.event.global[d]=!0)},remove:function(e,t,n,o,i){var r,s,a,l,c,u,d,p,f,h,g,m=x.hasData(e)&&x.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match(T)||[""]).length;c--;)if(f=g=(a=ke.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=C.event.special[f]||{},p=l[f=(o?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)u=p[r],!i&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||o&&o!==u.selector&&("**"!==o||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||C.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[c],n,o,!0);C.isEmptyObject(l)&&x.remove(e,"handle events")}},dispatch:function(e){var t,n,o,i,r,s=new Array(arguments.length),a=C.event.fix(e),e=(x.get(this,"events")||Object.create(null))[a.type]||[],l=C.event.special[a.type]||{};for(s[0]=a,t=1;t<arguments.length;t++)s[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(r=C.event.handlers.call(this,a,e),t=0;(o=r[t++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==i.namespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(i=((C.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,o,i,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[i=(o=t[n]).selector+" "]&&(s[i]=o.needsContext?-1<C(i,this).index(c):C.find(i,this,null,[c]).length),s[i]&&r.push(o);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&De(e,"click",n),!1},trigger:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&De(e,"click"),!0},_default:function(e){e=e.target;return we.test(e.type)&&e.click&&l(e,"input")&&x.get(e,"click")||l(e,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?n:f,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=n,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=n,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=n,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(t,e){C.event.special[t]={setup:function(){return De(this,t,Pe),!1},trigger:function(){return De(this,t),!0},_default:function(e){return x.get(e.target,t)},delegateType:e}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){C.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,o=e.handleObj;return n&&(n===this||C.contains(this,n))||(e.type=o.origType,t=o.handler.apply(this,arguments),e.type=i),t}}}),C.fn.extend({on:function(e,t,n,o){return Ae(this,e,t,n,o)},one:function(e,t,n,o){return Ae(this,e,t,n,o,1)},off:function(e,t,n){var o,i;if(e&&e.preventDefault&&e.handleObj)o=e.handleObj,C(e.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler);else{if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=f),this.each(function(){C.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i])}return this}});var Le=/<script|<style|<link/i,Me=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function je(e,t){return l(e,"table")&&l(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ne(e,t){var n,o,i,r;if(1===t.nodeType){if(x.hasData(e)&&(r=x.get(e).events))for(i in x.remove(t,"handle events"),r)for(n=0,o=r[i].length;n<o;n++)C.event.add(t,i,r[i][n]);c.hasData(e)&&(e=c.access(e),e=C.extend({},e),c.set(t,e))}}function D(n,o,i,r){o=_(o);var e,t,s,a,l,c,u=0,d=n.length,p=d-1,f=o[0],h=y(f);if(h||1<d&&"string"==typeof f&&!m.checkClone&&Me.test(f))return n.each(function(e){var t=n.eq(e);h&&(o[0]=f.call(this,e,t.html())),D(t,o,i,r)});if(d&&(t=(e=$e(o,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(a=(s=C.map(A(e,"script"),qe)).length;u<d;u++)l=e,u!==p&&(l=C.clone(l,!0,!0),a&&C.merge(s,A(l,"script"))),i.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,C.map(s,He),u=0;u<a;u++)l=s[u],Ce.test(l.type||"")&&!x.access(l,"globalEval")&&C.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):V(l.textContent.replace(Ie,""),l,c))}return n}function _e(e,t,n){for(var o,i=t?C.filter(t,e):e,r=0;null!=(o=i[r]);r++)n||1!==o.nodeType||C.cleanData(A(o)),o.parentNode&&(n&&$(o)&&Te(A(o,"script")),o.parentNode.removeChild(o));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var o,i,r,s,a,l,c,u=e.cloneNode(!0),d=$(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=A(u),o=0,i=(r=A(e)).length;o<i;o++)a=r[o],l=s[o],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&we.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(r=r||A(e),s=s||A(u),o=0,i=r.length;o<i;o++)Ne(r[o],s[o]);else Ne(e,u);return 0<(s=A(u,"script")).length&&Te(s,!d&&A(e,"script")),u},cleanData:function(e){for(var t,n,o,i=C.event.special,r=0;void 0!==(n=e[r]);r++)if(v(n)){if(t=n[x.expando]){if(t.events)for(o in t.events)i[o]?C.event.remove(n,o):C.removeEvent(n,o,t.handle);n[x.expando]=void 0}n[c.expando]&&(n[c.expando]=void 0)}}}),C.fn.extend({detach:function(e){return _e(this,e,!0)},remove:function(e){return _e(this,e)},text:function(e){return d(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return D(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return D(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=je(this,e)).insertBefore(e,t.firstChild)})},before:function(){return D(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return D(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(A(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return d(this,function(e){var t=this[0]||{},n=0,o=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!P[(Se.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<o;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(A(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return D(this,arguments,function(e){var t=this.parentNode;C.inArray(this,n)<0&&(C.cleanData(A(this)),t&&t.replaceChild(e,this))},n)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){C.fn[e]=function(e){for(var t,n=[],o=C(e),i=o.length-1,r=0;r<=i;r++)t=r===i?this:this.clone(!0),C(o[r])[s](t),F.apply(n,t.get());return this.pushStack(n)}});function Fe(e){var t=e.ownerDocument.defaultView;return(t=t&&t.opener?t:w).getComputedStyle(e)}function Oe(e,t,n){var o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in n=n.call(e),t)e.style[o]=i[o];return n}var ze,Re,Be,We,Xe,Ye,Ve,i,Ue=new RegExp("^("+e+")(?!px)[a-z%]+$","i"),Ze=/^--/,Qe=new RegExp(p.join("|"),"i"),r="[\\x20\\t\\r\\n\\f]",Ge=new RegExp("^"+r+"+|((?:^|[^\\\\])(?:\\\\.)*)"+r+"+$","g");function Ke(){var e;i&&(Ve.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",i.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",E.appendChild(Ve).appendChild(i),e=w.getComputedStyle(i),ze="1%"!==e.top,Ye=12===Je(e.marginLeft),i.style.right="60%",We=36===Je(e.right),Re=36===Je(e.width),i.style.position="absolute",Be=12===Je(i.offsetWidth/3),E.removeChild(Ve),i=null)}function Je(e){return Math.round(parseFloat(e))}function et(e,t,n){var o,i=Ze.test(t),r=e.style;return(n=n||Fe(e))&&(o=n.getPropertyValue(t)||n[t],""!==(o=i?o.replace(Ge,"$1"):o)||$(e)||(o=C.style(e,t)),!m.pixelBoxStyles()&&Ue.test(o)&&Qe.test(t)&&(i=r.width,e=r.minWidth,t=r.maxWidth,r.minWidth=r.maxWidth=r.width=o,o=n.width,r.width=i,r.minWidth=e,r.maxWidth=t)),void 0!==o?o+"":o}function tt(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ve=S.createElement("div"),(i=S.createElement("div")).style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===i.style.backgroundClip,C.extend(m,{boxSizingReliable:function(){return Ke(),Re},pixelBoxStyles:function(){return Ke(),We},pixelPosition:function(){return Ke(),ze},reliableMarginLeft:function(){return Ke(),Ye},scrollboxSize:function(){return Ke(),Be},reliableTrDimensions:function(){var e,t,n;return null==Xe&&(e=S.createElement("table"),t=S.createElement("tr"),n=S.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",E.appendChild(e).appendChild(t).appendChild(n),n=w.getComputedStyle(t),Xe=parseInt(n.height,10)+parseInt(n.borderTopWidth,10)+parseInt(n.borderBottomWidth,10)===t.offsetHeight,E.removeChild(e)),Xe}}));var nt=["Webkit","Moz","ms"],ot=S.createElement("div").style,it={};function rt(e){var t=C.cssProps[e]||it[e];return t||(e in ot?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if((e=nt[n]+t)in ot)return e}(e)||e)}var st=/^(none|table(?!-c[ea]).+)/,at={position:"absolute",visibility:"hidden",display:"block"},lt={letterSpacing:"0",fontWeight:"400"};function ct(e,t,n){var o=ve.exec(t);return o?Math.max(0,o[2]-(n||0))+(o[3]||"px"):t}function ut(e,t,n,o,i,r){var s="width"===t?1:0,a=0,l=0;if(n===(o?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=C.css(e,n+p[s],!0,i)),o?("content"===n&&(l-=C.css(e,"padding"+p[s],!0,i)),"margin"!==n&&(l-=C.css(e,"border"+p[s]+"Width",!0,i))):(l+=C.css(e,"padding"+p[s],!0,i),"padding"!==n?l+=C.css(e,"border"+p[s]+"Width",!0,i):a+=C.css(e,"border"+p[s]+"Width",!0,i));return!o&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l}function dt(e,t,n){var o=Fe(e),i=(!m.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,o),r=i,s=et(e,t,o),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&l(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===C.css(e,"display",!1,o))&&e.getClientRects().length&&(i="border-box"===C.css(e,"boxSizing",!1,o),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ut(e,t,n||(i?"border":"content"),r,o,s)+"px"}function s(e,t,n,o,i){return new s.prototype.init(e,t,n,o,i)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t)return""===(t=et(e,"opacity"))?"1":t}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,o){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,r,s,a=b(t),l=Ze.test(t),c=e.style;if(l||(t=rt(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,o))?i:c[t];"string"===(r=_typeof(n))&&(i=ve.exec(n))&&i[1]&&(n=be(e,t,i),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=i&&i[3]||(C.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,o))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,o){var i,r=b(t);return Ze.test(t)||(t=rt(r)),"normal"===(i=void 0===(i=(r=C.cssHooks[t]||C.cssHooks[r])&&"get"in r?r.get(e,!0,n):i)?et(e,t,o):i)&&t in lt&&(i=lt[t]),(""===n||n)&&(r=parseFloat(i),!0===n||isFinite(r))?r||0:i}}),C.each(["height","width"],function(e,s){C.cssHooks[s]={get:function(e,t,n){if(t)return!st.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?dt(e,s,n):Oe(e,at,function(){return dt(e,s,n)})},set:function(e,t,n){var o=Fe(e),i=!m.scrollboxSize()&&"absolute"===o.position,r=(i||n)&&"border-box"===C.css(e,"boxSizing",!1,o),n=n?ut(e,s,n,r,o):0;return r&&i&&(n-=Math.ceil(e["offset"+s[0].toUpperCase()+s.slice(1)]-parseFloat(o[s])-ut(e,s,"border",!1,o)-.5)),n&&(r=ve.exec(t))&&"px"!==(r[3]||"px")&&(e.style[s]=t,t=C.css(e,s)),ct(0,t,n)}}}),C.cssHooks.marginLeft=tt(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(et(e,"marginLeft"))||e.getBoundingClientRect().left-Oe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(i,r){C.cssHooks[i+r]={expand:function(e){for(var t=0,n={},o="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+p[t]+r]=o[t]||o[t-2]||o[0];return n}},"margin"!==i&&(C.cssHooks[i+r].set=ct)}),C.fn.extend({css:function(e,t){return d(this,function(e,t,n){var o,i,r={},s=0;if(Array.isArray(t)){for(o=Fe(e),i=t.length;s<i;s++)r[t[s]]=C.css(e,t[s],!1,o);return r}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,1<arguments.length)}}),((C.Tween=s).prototype={constructor:s,init:function(e,t,n,o,i,r){this.elem=e,this.prop=n,this.easing=i||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=o,this.unit=r||(C.cssNumber[n]?"":"px")},cur:function(){var e=s.propHooks[this.prop];return(e&&e.get?e:s.propHooks._default).get(this)},run:function(e){var t,n=s.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:s.propHooks._default).set(this),this}}).init.prototype=s.prototype,(s.propHooks={_default:{get:function(e){return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(e=C.css(e.elem,e.prop,""))&&"auto"!==e?e:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[rt(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=s.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=s.prototype.init,C.fx.step={};var L,pt,M,ft=/^(?:toggle|show|hide)$/,ht=/queueHooks$/;function gt(){pt&&(!1===S.hidden&&w.requestAnimationFrame?w.requestAnimationFrame(gt):w.setTimeout(gt,C.fx.interval),C.fx.tick())}function mt(){return w.setTimeout(function(){L=void 0}),L=Date.now()}function vt(e,t){var n,o=0,i={height:e};for(t=t?1:0;o<4;o+=2-t)i["margin"+(n=p[o])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function yt(e,t,n){for(var o,i=(I.tweeners[t]||[]).concat(I.tweeners["*"]),r=0,s=i.length;r<s;r++)if(o=i[r].call(n,t,e))return o}function I(i,e,t){var n,r,o,s,a,l,c,u=0,d=I.prefilters.length,p=C.Deferred().always(function(){delete f.elem}),f=function(){if(!r){for(var e=L||mt(),e=Math.max(0,h.startTime+h.duration-e),t=1-(e/h.duration||0),n=0,o=h.tweens.length;n<o;n++)h.tweens[n].run(t);if(p.notifyWith(i,[h,t,e]),t<1&&o)return e;o||p.notifyWith(i,[h,1,0]),p.resolveWith(i,[h])}return!1},h=p.promise({elem:i,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},t),originalProperties:e,originalOptions:t,startTime:L||mt(),duration:t.duration,tweens:[],createTween:function(e,t){t=C.Tween(i,h.opts,e,t,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(t),t},stop:function(e){var t=0,n=e?h.tweens.length:0;if(!r){for(r=!0;t<n;t++)h.tweens[t].run(1);e?(p.notifyWith(i,[h,1,0]),p.resolveWith(i,[h,e])):p.rejectWith(i,[h,e])}return this}}),g=h.props,m=g,v=h.opts.specialEasing;for(o in m)if(a=v[s=b(o)],l=m[o],Array.isArray(l)&&(a=l[1],l=m[o]=l[0]),o!==s&&(m[s]=l,delete m[o]),(c=C.cssHooks[s])&&"expand"in c)for(o in l=c.expand(l),delete m[s],l)o in m||(m[o]=l[o],v[o]=a);else v[s]=a;for(;u<d;u++)if(n=I.prefilters[u].call(h,i,g,h.opts))return y(n.stop)&&(C._queueHooks(h.elem,h.opts.queue).stop=n.stop.bind(n)),n;return C.map(g,yt,h),y(h.opts.start)&&h.opts.start.call(i,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),C.fx.timer(C.extend(f,{elem:i,anim:h,queue:h.opts.queue})),h}C.Animation=C.extend(I,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return be(n.elem,e,ve.exec(t),n),n}]},tweener:function(e,t){for(var n,o=0,i=(e=y(e)?(t=e,["*"]):e.match(T)).length;o<i;o++)n=e[o],I.tweeners[n]=I.tweeners[n]||[],I.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var o,i,r,s,a,l,c,u="width"in t||"height"in t,d=this,p={},f=e.style,h=e.nodeType&&me(e),g=x.get(e,"fxshow");for(o in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()})})),t)if(i=t[o],ft.test(i)){if(delete t[o],r=r||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[o])continue;h=!0}p[o]=g&&g[o]||C.style(e,o)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(p))for(o in u&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=x.get(e,"display")),"none"===(u=C.css(e,"display"))&&(c?u=c:(k([e],!0),c=e.style.display||c,u=C.css(e,"display"),k([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===C.css(e,"float")&&(l||(d.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(h=g.hidden):g=x.access(e,"fxshow",{display:c}),r&&(g.hidden=!h),h&&k([e],!0),d.done(function(){for(o in h||k([e]),x.remove(e,"fxshow"),p)C.style(e,o,p[o])})),l=yt(h?g[o]:0,o,d),o in g||(g[o]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?I.prefilters.unshift(e):I.prefilters.push(e)}}),C.speed=function(e,t,n){var o=e&&"object"===_typeof(e)?C.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return C.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in C.fx.speeds?o.duration=C.fx.speeds[o.duration]:o.duration=C.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){y(o.old)&&o.old.call(this),o.queue&&C.dequeue(this,o.queue)},o},C.fn.extend({fadeTo:function(e,t,n,o){return this.filter(me).css("opacity",0).show().end().animate({opacity:t},e,n,o)},animate:function(t,e,n,o){function i(){var e=I(this,C.extend({},t),s);(r||x.get(this,"finish"))&&e.stop(!0)}var r=C.isEmptyObject(t),s=C.speed(e,n,o);return i.finish=i,r||!1===s.queue?this.each(i):this.queue(s.queue,i)},stop:function(i,e,r){function s(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof i&&(r=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=C.timers,o=x.get(this);if(t)o[t]&&o[t].stop&&s(o[t]);else for(t in o)o[t]&&o[t].stop&&ht.test(t)&&s(o[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||C.dequeue(this,i)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=x.get(this),n=t[s+"queue"],o=t[s+"queueHooks"],i=C.timers,r=n?n.length:0;for(t.finish=!0,C.queue(this,s,[]),o&&o.stop&&o.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===s&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),C.each(["toggle","show","hide"],function(e,o){var i=C.fn[o];C.fn[o]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(vt(o,!0),e,t,n)}}),C.each({slideDown:vt("show"),slideUp:vt("hide"),slideToggle:vt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,o){C.fn[e]=function(e,t,n){return this.animate(o,e,t,n)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(L=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),L=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){pt||(pt=!0,gt())},C.fx.stop=function(){pt=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(o,e){return o=C.fx&&C.fx.speeds[o]||o,this.queue(e=e||"fx",function(e,t){var n=w.setTimeout(e,o);t.stop=function(){w.clearTimeout(n)}})},M=S.createElement("input"),e=S.createElement("select").appendChild(S.createElement("option")),M.type="checkbox",m.checkOn=""!==M.value,m.optSelected=e.selected,(M=S.createElement("input")).value="t",M.type="radio",m.radioValue="t"===M.value;var bt,xt=C.expr.attrHandle,wt=(C.fn.extend({attr:function(e,t){return d(this,C.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var o,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?C.prop(e,t,n):(1===r&&C.isXMLDoc(e)||(i=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?bt:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):i&&"set"in i&&void 0!==(o=i.set(e,n,t))?o:(e.setAttribute(t,n+""),n):!(i&&"get"in i&&null!==(o=i.get(e,t)))&&null==(o=C.find.attr(e,t))?void 0:o)},attrHooks:{type:{set:function(e,t){var n;if(!m.radioValue&&"radio"===t&&l(e,"input"))return n=e.value,e.setAttribute("type",t),n&&(e.value=n),t}}},removeAttr:function(e,t){var n,o=0,i=t&&t.match(T);if(i&&1===e.nodeType)for(;n=i[o++];)e.removeAttribute(n)}}),bt={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var s=xt[t]||C.find.attr;xt[t]=function(e,t,n){var o,i,r=t.toLowerCase();return n||(i=xt[r],xt[r]=o,o=null!=s(e,t,n)?r:null,xt[r]=i),o}}),/^(?:input|select|textarea|button)$/i),St=/^(?:a|area)$/i;function j(e){return(e.match(T)||[]).join(" ")}function q(e){return e.getAttribute&&e.getAttribute("class")||""}function Ct(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(T)||[]}C.fn.extend({prop:function(e,t){return d(this,C.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var o,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&C.isXMLDoc(e)||(t=C.propFix[t]||t,i=C.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(o=i.set(e,n,t))?o:e[t]=n:i&&"get"in i&&null!==(o=i.get(e,t))?o:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||St.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(C.propHooks.selected={get:function(e){e=e.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(t){var e,n,o,i,r,s;return y(t)?this.each(function(e){C(this).addClass(t.call(this,e,q(this)))}):(e=Ct(t)).length?this.each(function(){if(o=q(this),n=1===this.nodeType&&" "+j(o)+" "){for(r=0;r<e.length;r++)i=e[r],n.indexOf(" "+i+" ")<0&&(n+=i+" ");s=j(n),o!==s&&this.setAttribute("class",s)}}):this},removeClass:function(t){var e,n,o,i,r,s;return y(t)?this.each(function(e){C(this).removeClass(t.call(this,e,q(this)))}):arguments.length?(e=Ct(t)).length?this.each(function(){if(o=q(this),n=1===this.nodeType&&" "+j(o)+" "){for(r=0;r<e.length;r++)for(i=e[r];-1<n.indexOf(" "+i+" ");)n=n.replace(" "+i+" "," ");s=j(n),o!==s&&this.setAttribute("class",s)}}):this:this.attr("class","")},toggleClass:function(t,n){var e,o,i,r,s=_typeof(t),a="string"===s||Array.isArray(t);return y(t)?this.each(function(e){C(this).toggleClass(t.call(this,e,q(this),n),n)}):"boolean"==typeof n&&a?n?this.addClass(t):this.removeClass(t):(e=Ct(t),this.each(function(){if(a)for(r=C(this),i=0;i<e.length;i++)o=e[i],r.hasClass(o)?r.removeClass(o):r.addClass(o);else void 0!==t&&"boolean"!==s||((o=q(this))&&x.set(this,"__className__",o),this.setAttribute&&this.setAttribute("class",!o&&!1!==t&&x.get(this,"__className__")||""))}))},hasClass:function(e){for(var t,n=0,o=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+j(q(t))+" ").indexOf(o))return!0;return!1}});function Tt(e){e.stopPropagation()}var Et=/\r/g,$t=(C.fn.extend({val:function(t){var n,e,o,i=this[0];return arguments.length?(o=y(t),this.each(function(e){1===this.nodeType&&(null==(e=o?t.call(this,e,C(this).val()):t)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=C.map(e,function(e){return null==e?"":e+""})),(n=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):i?(n=C.valHooks[i.type]||C.valHooks[i.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(i,"value"))?e:"string"==typeof(e=i.value)?e.replace(Et,""):null==e?"":e:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:j(C.text(e))}},select:{get:function(e){for(var t,n=e.options,o=e.selectedIndex,i="select-one"===e.type,r=i?null:[],s=i?o+1:n.length,a=o<0?s:i?o:0;a<s;a++)if(((t=n[a]).selected||a===o)&&!(t.disabled||t.parentNode.disabled&&l(t.parentNode,"optgroup"))){if(t=C(t).val(),i)return t;r.push(t)}return r},set:function(e,t){for(var n,o,i=e.options,r=C.makeArray(t),s=i.length;s--;)((o=i[s]).selected=-1<C.inArray(C.valHooks.option.get(o),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<C.inArray(C(e).val(),t)}},m.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),m.focusin="onfocusin"in w,/^(?:focusinfocus|focusoutblur)$/),kt=(C.extend(C.event,{trigger:function(e,t,n,o){var i,r,s,a,l,c,u,d=[n||S],p=B.call(e,"type")?e.type:e,f=B.call(e,"namespace")?e.namespace.split("."):[],h=u=r=n=n||S;if(3!==n.nodeType&&8!==n.nodeType&&!$t.test(p+C.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),a=p.indexOf(":")<0&&"on"+p,(e=e[C.expando]?e:new C.Event(p,"object"===_typeof(e)&&e)).isTrigger=o?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),c=C.event.special[p]||{},o||!c.trigger||!1!==c.trigger.apply(n,t))){if(!o&&!c.noBubble&&!g(n)){for(s=c.delegateType||p,$t.test(s+p)||(h=h.parentNode);h;h=h.parentNode)d.push(h),r=h;r===(n.ownerDocument||S)&&d.push(r.defaultView||r.parentWindow||w)}for(i=0;(h=d[i++])&&!e.isPropagationStopped();)u=h,e.type=1<i?s:c.bindType||p,(l=(x.get(h,"events")||Object.create(null))[e.type]&&x.get(h,"handle"))&&l.apply(h,t),(l=a&&h[a])&&l.apply&&v(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=p,o||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!v(n)||a&&y(n[p])&&!g(n)&&((r=n[a])&&(n[a]=null),C.event.triggered=p,e.isPropagationStopped()&&u.addEventListener(p,Tt),n[p](),e.isPropagationStopped()&&u.removeEventListener(p,Tt),C.event.triggered=void 0,r&&(n[a]=r)),e.result}},simulate:function(e,t,n){n=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(n,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),m.focusin||C.each({focus:"focusin",blur:"focusout"},function(n,o){function i(e){C.event.simulate(o,e.target,C.event.fix(e))}C.event.special[o]={setup:function(){var e=this.ownerDocument||this.document||this,t=x.access(e,o);t||e.addEventListener(n,i,!0),x.access(e,o,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=x.access(e,o)-1;t?x.access(e,o,t):(e.removeEventListener(n,i,!0),x.remove(e,o))}}}),w.location),Pt={guid:Date.now()},At=/\?/,Dt=(C.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new w.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||C.error("Invalid XML: "+(n?C.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t},/\[\]$/),Lt=/\r?\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,It=/^(?:input|select|textarea|keygen)/i;C.param=function(e,t){function n(e,t){t=y(t)?t():t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==t?"":t)}var o,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){n(this.name,this.value)});else for(o in e)!function n(o,e,i,r){if(Array.isArray(e))C.each(e,function(e,t){i||Dt.test(o)?r(o,t):n(o+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,i,r)});else if(i||"object"!==h(e))r(o,e);else for(var t in e)n(o+"["+t+"]",e[t],i,r)}(o,e[o],t,n);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&It.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!we.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(Lt,"\r\n")}}):{name:t.name,value:n.replace(Lt,"\r\n")}}).get()}});var jt=/%20/g,qt=/#.*$/,Ht=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,_t=/^(?:GET|HEAD)$/,Ft=/^\/\//,Ot={},zt={},Rt="*/".concat("*"),Bt=S.createElement("a");function Wt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,o=0,i=e.toLowerCase().match(T)||[];if(y(t))for(;n=i[o++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function Xt(t,o,i,r){var s={},a=t===zt;function l(e){var n;return s[e]=!0,C.each(t[e]||[],function(e,t){t=t(o,i,r);return"string"!=typeof t||a||s[t]?a?!(n=t):void 0:(o.dataTypes.unshift(t),l(t),!1)}),n}return l(o.dataTypes[0])||!s["*"]&&l("*")}function Yt(e,t){var n,o,i=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:o=o||{})[n]=t[n]);return o&&C.extend(!0,e,o),e}Bt.href=kt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Yt(Yt(e,C.ajaxSettings),t):Yt(C.ajaxSettings,e)},ajaxPrefilter:Wt(Ot),ajaxTransport:Wt(zt),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0);var l,c,u,n,d,p,f,o,h=C.ajaxSetup({},t=t||{}),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?C(g):C.event,v=C.Deferred(),y=C.Callbacks("once memory"),b=h.statusCode||{},i={},r={},s="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(p){if(!n)for(n={};t=Nt.exec(u);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return p?u:null},setRequestHeader:function(e,t){return null==p&&(e=r[e.toLowerCase()]=r[e.toLowerCase()]||e,i[e]=t),this},overrideMimeType:function(e){return null==p&&(h.mimeType=e),this},statusCode:function(e){if(e)if(p)x.always(e[x.status]);else for(var t in e)b[t]=[b[t],e[t]];return this},abort:function(e){e=e||s;return l&&l.abort(e),a(0,e),this}};if(v.promise(x),h.url=((e||h.url||kt.href)+"").replace(Ft,kt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(T)||[""],null==h.crossDomain){e=S.createElement("a");try{e.href=h.url,e.href=e.href,h.crossDomain=Bt.protocol+"//"+Bt.host!=e.protocol+"//"+e.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=C.param(h.data,h.traditional)),Xt(Ot,h,t,x),!p){for(o in(f=C.event&&h.global)&&0==C.active++&&C.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!_t.test(h.type),c=h.url.replace(qt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(jt,"+")):(e=h.url.slice(c.length),h.data&&(h.processData||"string"==typeof h.data)&&(c+=(At.test(c)?"&":"?")+h.data,delete h.data),!1===h.cache&&(c=c.replace(Ht,"$1"),e=(At.test(c)?"&":"?")+"_="+Pt.guid+++e),h.url=c+e),h.ifModified&&(C.lastModified[c]&&x.setRequestHeader("If-Modified-Since",C.lastModified[c]),C.etag[c]&&x.setRequestHeader("If-None-Match",C.etag[c])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&x.setRequestHeader("Content-Type",h.contentType),x.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Rt+"; q=0.01":""):h.accepts["*"]),h.headers)x.setRequestHeader(o,h.headers[o]);if(h.beforeSend&&(!1===h.beforeSend.call(g,x,h)||p))return x.abort();if(s="abort",y.add(h.complete),x.done(h.success),x.fail(h.error),l=Xt(zt,h,t,x)){if(x.readyState=1,f&&m.trigger("ajaxSend",[x,h]),p)return x;h.async&&0<h.timeout&&(d=w.setTimeout(function(){x.abort("timeout")},h.timeout));try{p=!1,l.send(i,a)}catch(e){if(p)throw e;a(-1,e)}}else a(-1,"No Transport")}return x;function a(e,t,n,o){var i,r,s,a=t;p||(p=!0,d&&w.clearTimeout(d),l=void 0,u=o||"",x.readyState=0<e?4:0,o=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var o,i,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(i in a)if(a[i]&&a[i].test(o)){l.unshift(i);break}if(l[0]in n)r=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){r=i;break}s=s||i}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(h,x,n)),!o&&-1<C.inArray("script",h.dataTypes)&&C.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),s=function(e,t,n,o){var i,r,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&o&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(i in c)if((a=i.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[i]:!0!==c[i]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(h,s,x,o),o?(h.ifModified&&((n=x.getResponseHeader("Last-Modified"))&&(C.lastModified[c]=n),(n=x.getResponseHeader("etag"))&&(C.etag[c]=n)),204===e||"HEAD"===h.type?a="nocontent":304===e?a="notmodified":(a=s.state,i=s.data,o=!(r=s.error))):(r=a,!e&&a||(a="error",e<0&&(e=0))),x.status=e,x.statusText=(t||a)+"",o?v.resolveWith(g,[i,a,x]):v.rejectWith(g,[x,a,r]),x.statusCode(b),b=void 0,f&&m.trigger(o?"ajaxSuccess":"ajaxError",[x,h,o?i:r]),y.fireWith(g,[x,a]),f&&(m.trigger("ajaxComplete",[x,h]),--C.active||C.event.trigger("ajaxStop")))}},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,i){C[i]=function(e,t,n,o){return y(t)&&(o=o||n,n=t,t=void 0),C.ajax(C.extend({url:e,type:i,dataType:o,data:t,success:n},C.isPlainObject(e)&&e))}}),C.ajaxPrefilter(function(e){for(var t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){return this[0]&&(y(e)&&(e=e.call(this[0])),e=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return y(n)?this.each(function(e){C(this).wrapInner(n.call(this,e))}):this.each(function(){var e=C(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=y(t);return this.each(function(e){C(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new w.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Ut=C.ajaxSettings.xhr(),Zt=(m.cors=!!Ut&&"withCredentials"in Ut,m.ajax=Ut=!!Ut,C.ajaxTransport(function(i){var r,s;if(m.cors||Ut&&!i.crossDomain)return{send:function(e,t){var n,o=i.xhr();if(o.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)o[n]=i.xhrFields[n];for(n in i.mimeType&&o.overrideMimeType&&o.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)o.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=s=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?t(0,"error"):t(o.status,o.statusText):t(Vt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=r(),s=o.onerror=o.ontimeout=r("error"),void 0!==o.onabort?o.onabort=s:o.onreadystatechange=function(){4===o.readyState&&w.setTimeout(function(){r&&s()})},r=r("abort");try{o.send(i.hasContent&&i.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(n){var o,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){o=C("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){o.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),S.head.appendChild(o[0])},abort:function(){i&&i()}}}),[]),Qt=/(=)\?(?=&|$)|\?\?/,Gt=(C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Zt.pop()||C.expando+"_"+Pt.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,n){var o,i,r,s=!1!==e.jsonp&&(Qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Qt,"$1"+o):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return r||C.error(o+" was not called"),r[0]},e.dataTypes[0]="json",i=w[o],w[o]=function(){r=arguments},n.always(function(){void 0===i?C(w).removeProp(o):w[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Zt.push(o)),r&&y(i)&&i(r[0]),r=i=void 0}),"script"}),m.createHTMLDocument=((r=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===r.childNodes.length),C.parseHTML=function(e,t,n){var o;return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((o=(t=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,t.head.appendChild(o)):t=S),o=!n&&[],(n=G.exec(e))?[t.createElement(n[1])]:(n=$e([e],t,o),o&&o.length&&C(o).remove(),C.merge([],n.childNodes)))},C.fn.load=function(e,t,n){var o,i,r,s=this,a=e.indexOf(" ");return-1<a&&(o=j(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(i="POST"),0<s.length&&C.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(o?C("<div>").append(C.parseHTML(e)).find(o):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},C.expr.pseudos.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length},C.offset={setOffset:function(e,t,n){var o,i,r,s,a=C.css(e,"position"),l=C(e),c={};"static"===a&&(e.style.position="relative"),r=l.offset(),o=C.css(e,"top"),s=C.css(e,"left"),a=("absolute"===a||"fixed"===a)&&-1<(o+s).indexOf("auto")?(i=(a=l.position()).top,a.left):(i=parseFloat(o)||0,parseFloat(s)||0),null!=(t=y(t)?t.call(e,n,C.extend({},r)):t).top&&(c.top=t.top-r.top+i),null!=t.left&&(c.left=t.left-r.left+a),"using"in t?t.using.call(e,c):l.css(c)}},C.fn.extend({offset:function(t){var e,n;return arguments.length?void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)}):(n=this[0])?n.getClientRects().length?(e=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,o=this[0],i={top:0,left:0};if("fixed"===C.css(o,"position"))t=o.getBoundingClientRect();else{for(t=this.offset(),n=o.ownerDocument,e=o.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==o&&1===e.nodeType&&((i=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),i.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-C.css(o,"marginTop",!0),left:t.left-i.left-C.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||E})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var r="pageYOffset"===i;C.fn[t]=function(e){return d(this,function(e,t,n){var o;if(g(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===n)return o?o[i]:e[t];o?o.scrollTo(r?o.pageXOffset:n,r?n:o.pageYOffset):e[t]=n},t,e,arguments.length)}}),C.each(["top","left"],function(e,n){C.cssHooks[n]=tt(m.pixelPosition,function(e,t){if(t)return t=et(e,n),Ue.test(t)?C(e).position()[n]+"px":t})}),C.each({Height:"height",Width:"width"},function(s,a){C.each({padding:"inner"+s,content:a,"":"outer"+s},function(o,r){C.fn[r]=function(e,t){var n=arguments.length&&(o||"boolean"!=typeof e),i=o||(!0===e||!0===t?"margin":"border");return d(this,function(e,t,n){var o;return g(e)?0===r.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+s],o["scroll"+s],e.body["offset"+s],o["offset"+s],o["client"+s])):void 0===n?C.css(e,t,i):C.style(e,t,n,i)},a,n?e:void 0,n)}})}),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,o){return this.on(t,e,n,o)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){C.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g),Kt=(C.proxy=function(e,t){var n,o;if("string"==typeof t&&(o=e[t],t=e,e=o),y(e))return n=a.call(arguments,2),(o=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||C.guid++,o},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=l,C.isFunction=y,C.isWindow=g,C.camelCase=b,C.type=h,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(Gt,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C}),w.jQuery),Jt=w.$;return C.noConflict=function(e){return w.$===C&&(w.$=Jt),e&&w.jQuery===C&&(w.jQuery=Kt),C},void 0===H&&(w.jQuery=w.$=C),C}),function(Y){var V={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};Y.fn.bxSlider=function(t){var c,u,r,s,n,e,o,a,l,d,p,f,h,g,m,v,y,b,x,w,S,C,T,N,_,F,E,$,k,P,A,D,O,z,L,R,M,B,W,X,I,j,q,H;return 0===this.length?this:1<this.length?(this.each(function(){Y(this).bxSlider(t)}),this):(c={},u=this,r=Y(window).width(),s=Y(window).height(),Y(u).data("bxSlider")?void 0:(n=function(){Y(u).data("bxSlider")||(c.settings=Y.extend({},V,t),c.settings.slideWidth=parseInt(c.settings.slideWidth),c.children=u.children(c.settings.slideSelector),c.children.length<c.settings.minSlides&&(c.settings.minSlides=c.children.length),c.children.length<c.settings.maxSlides&&(c.settings.maxSlides=c.children.length),c.settings.randomStart&&(c.settings.startSlide=Math.floor(Math.random()*c.children.length)),c.active={index:c.settings.startSlide},c.carousel=1<c.settings.minSlides||1<c.settings.maxSlides,c.carousel&&(c.settings.preloadImages="all"),c.minThreshold=c.settings.minSlides*c.settings.slideWidth+(c.settings.minSlides-1)*c.settings.slideMargin,c.maxThreshold=c.settings.maxSlides*c.settings.slideWidth+(c.settings.maxSlides-1)*c.settings.slideMargin,c.working=!1,c.controls={},c.interval=null,c.animProp="vertical"===c.settings.mode?"top":"left",c.usingCSS=c.settings.useCSS&&"fade"!==c.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return c.cssPrefix=t[n].replace("Perspective","").toLowerCase(),c.animProp="-"+c.cssPrefix+"-transform",!0;return!1}(),"vertical"===c.settings.mode&&(c.settings.maxSlides=c.settings.minSlides),u.data("origStyle",u.attr("style")),u.children(c.settings.slideSelector).each(function(){Y(this).data("origStyle",Y(this).attr("style"))}),e())},e=function(){var e=c.children.eq(c.settings.startSlide);u.wrap('<div class="'+c.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),c.viewport=u.parent(),c.settings.ariaLive&&!c.settings.ticker&&c.viewport.attr("aria-live","polite"),c.loader=Y('<div class="bx-loading" />'),c.viewport.prepend(c.loader),u.css({width:"horizontal"===c.settings.mode?1e3*c.children.length+215+"%":"auto",position:"relative"}),c.usingCSS&&c.settings.easing?u.css("-"+c.cssPrefix+"-transition-timing-function",c.settings.easing):c.settings.easing||(c.settings.easing="swing"),c.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),c.viewport.parent().css({maxWidth:d()}),c.children.css({float:"horizontal"===c.settings.mode?"left":"none",listStyle:"none",position:"relative"}),c.children.css("width",p()),"horizontal"===c.settings.mode&&0<c.settings.slideMargin&&c.children.css("marginRight",c.settings.slideMargin),"vertical"===c.settings.mode&&0<c.settings.slideMargin&&c.children.css("marginBottom",c.settings.slideMargin),"fade"===c.settings.mode&&(c.children.css({position:"absolute",zIndex:0,display:"none"}),c.children.eq(c.settings.startSlide).css({zIndex:c.settings.slideZIndex,display:"block"})),c.controls.el=Y('<div class="bx-controls" />'),c.settings.captions&&S(),c.active.last=c.settings.startSlide===h()-1,c.settings.video&&u.fitVids(),"none"===c.settings.preloadImages?e=null:"all"!==c.settings.preloadImages&&!c.settings.ticker||(e=c.children),c.settings.ticker?c.settings.pager=!1:(c.settings.controls&&x(),c.settings.auto&&c.settings.autoControls&&w(),c.settings.pager&&b(),(c.settings.controls||c.settings.autoControls||c.settings.pager)&&c.viewport.after(c.controls.el)),null===e?a():o(e,a)},o=function(e,t){var n=e.find('img:not([src=""]), iframe').length,o=0;0===n?t():e.find('img:not([src=""]), iframe').each(function(){Y(this).one("load error",function(){++o===n&&t()}).each(function(){!this.complete&&""!=this.src||Y(this).trigger("load")})})},a=function(){var e,t;c.settings.infiniteLoop&&"fade"!==c.settings.mode&&!c.settings.ticker&&(t="vertical"===c.settings.mode?c.settings.minSlides:c.settings.maxSlides,e=c.children.slice(0,t).clone(!0).addClass("bx-clone"),t=c.children.slice(-t).clone(!0).addClass("bx-clone"),c.settings.ariaHidden&&(e.attr("aria-hidden",!0),t.attr("aria-hidden",!0)),u.append(e).prepend(t)),c.loader.remove(),m(),"vertical"===c.settings.mode&&(c.settings.adaptiveHeight=!0),c.viewport.height(l()),u.redrawSlider(),c.settings.onSliderLoad.call(u,c.active.index),c.initialized=!0,c.settings.responsive&&Y(window).on("resize",q),c.settings.auto&&c.settings.autoStart&&(1<h()||c.settings.autoSlideForOnePage)&&O(),c.settings.ticker&&z(),c.settings.pager&&E(c.settings.startSlide),c.settings.controls&&P(),c.settings.touchEnabled&&!c.settings.ticker&&B(),c.settings.keyboardEnabled&&!c.settings.ticker&&Y(document).keydown(M)},l=function(){var t=0,e=Y();if("vertical"===c.settings.mode||c.settings.adaptiveHeight)if(c.carousel){var n=1===c.settings.moveSlides?c.active.index:c.active.index*g(),e=c.children.eq(n);for(i=1;i<=c.settings.maxSlides-1;i++)e=n+i>=c.children.length?e.add(c.children.eq(i-1)):e.add(c.children.eq(n+i))}else e=c.children.eq(c.active.index);else e=c.children;return"vertical"===c.settings.mode?(e.each(function(e){t+=Y(this).outerHeight()}),0<c.settings.slideMargin&&(t+=c.settings.slideMargin*(c.settings.minSlides-1))):t=Math.max.apply(Math,e.map(function(){return Y(this).outerHeight(!1)}).get()),"border-box"===c.viewport.css("box-sizing")?t+=parseFloat(c.viewport.css("padding-top"))+parseFloat(c.viewport.css("padding-bottom"))+parseFloat(c.viewport.css("border-top-width"))+parseFloat(c.viewport.css("border-bottom-width")):"padding-box"===c.viewport.css("box-sizing")&&(t+=parseFloat(c.viewport.css("padding-top"))+parseFloat(c.viewport.css("padding-bottom"))),t},d=function(){var e="100%";return e=0<c.settings.slideWidth?"horizontal"===c.settings.mode?c.settings.maxSlides*c.settings.slideWidth+(c.settings.maxSlides-1)*c.settings.slideMargin:c.settings.slideWidth:e},p=function(){var e=c.settings.slideWidth,t=c.viewport.width();if(0===c.settings.slideWidth||c.settings.slideWidth>t&&!c.carousel||"vertical"===c.settings.mode)e=t;else if(1<c.settings.maxSlides&&"horizontal"===c.settings.mode){if(t>c.maxThreshold)return e;t<c.minThreshold?e=(t-c.settings.slideMargin*(c.settings.minSlides-1))/c.settings.minSlides:c.settings.shrinkItems&&(e=Math.floor((t+c.settings.slideMargin)/Math.ceil((t+c.settings.slideMargin)/(e+c.settings.slideMargin))-c.settings.slideMargin))}return e},f=function(){var e,t=1;return"horizontal"===c.settings.mode&&0<c.settings.slideWidth?t=c.viewport.width()<c.minThreshold?c.settings.minSlides:c.viewport.width()>c.maxThreshold?c.settings.maxSlides:(e=c.children.first().width()+c.settings.slideMargin,Math.floor((c.viewport.width()+c.settings.slideMargin)/e)||1):"vertical"===c.settings.mode&&(t=c.settings.minSlides),t},h=function(){var e=0,t=0,n=0;if(0<c.settings.moveSlides){if(!c.settings.infiniteLoop){for(;t<c.children.length;)++e,t=n+f(),n+=c.settings.moveSlides<=f()?c.settings.moveSlides:f();return n}e=Math.ceil(c.children.length/g())}else e=Math.ceil(c.children.length/f());return e},g=function(){return 0<c.settings.moveSlides&&c.settings.moveSlides<=f()?c.settings.moveSlides:f()},m=function(){var e,t;c.children.length>c.settings.maxSlides&&c.active.last&&!c.settings.infiniteLoop?"horizontal"===c.settings.mode?(e=(t=c.children.last()).position(),v(-(e.left-(c.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===c.settings.mode&&(t=c.children.length-c.settings.minSlides,e=c.children.eq(t).position(),v(-e.top,"reset",0)):(e=c.children.eq(c.active.index*g()).position(),c.active.index===h()-1&&(c.active.last=!0),void 0!==e&&("horizontal"===c.settings.mode?v(-e.left,"reset",0):"vertical"===c.settings.mode&&v(-e.top,"reset",0)))},v=function t(e,n,o,i){var r;c.usingCSS?(r="vertical"===c.settings.mode?"translate3d(0, "+e+"px, 0)":"translate3d("+e+"px, 0, 0)",u.css("-"+c.cssPrefix+"-transition-duration",o/1e3+"s"),"slide"===n?(u.css(c.animProp,r),0!==o?u.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){Y(e.target).is(u)&&(u.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),$())}):$()):"reset"===n?u.css(c.animProp,r):"ticker"===n&&(u.css("-"+c.cssPrefix+"-transition-timing-function","linear"),u.css(c.animProp,r),0!==o?u.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){Y(e.target).is(u)&&(u.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),t(i.resetValue,"reset",0),L())}):(t(i.resetValue,"reset",0),L()))):((r={})[c.animProp]=e,"slide"===n?u.animate(r,o,c.settings.easing,function(){$()}):"reset"===n?u.css(c.animProp,e):"ticker"===n&&u.animate(r,o,"linear",function(){t(i.resetValue,"reset",0),L()}))},y=function(){for(var e="",t="",n=h(),o=0;o<n;o++)t="",c.settings.buildPager&&Y.isFunction(c.settings.buildPager)||c.settings.pagerCustom?(t=c.settings.buildPager(o),c.pagerEl.addClass("bx-custom-pager")):(t=o+1,c.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+o+'" class="bx-pager-link">'+t+"</a></div>";c.pagerEl.html(e)},b=function(){c.settings.pagerCustom?c.pagerEl=Y(c.settings.pagerCustom):(c.pagerEl=Y('<div class="bx-pager" />'),c.settings.pagerSelector?Y(c.settings.pagerSelector).html(c.pagerEl):c.controls.el.addClass("bx-has-pager").append(c.pagerEl),y()),c.pagerEl.on("click touchend","a",F)},x=function(){c.controls.next=Y('<a class="bx-next" href="">'+c.settings.nextText+"</a>"),c.controls.prev=Y('<a class="bx-prev" href="">'+c.settings.prevText+"</a>"),c.controls.next.on("click touchend",C),c.controls.prev.on("click touchend",T),c.settings.nextSelector&&Y(c.settings.nextSelector).append(c.controls.next),c.settings.prevSelector&&Y(c.settings.prevSelector).append(c.controls.prev),c.settings.nextSelector||c.settings.prevSelector||(c.controls.directionEl=Y('<div class="bx-controls-direction" />'),c.controls.directionEl.append(c.controls.prev).append(c.controls.next),c.controls.el.addClass("bx-has-controls-direction").append(c.controls.directionEl))},w=function(){c.controls.start=Y('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+c.settings.startText+"</a></div>"),c.controls.stop=Y('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+c.settings.stopText+"</a></div>"),c.controls.autoEl=Y('<div class="bx-controls-auto" />'),c.controls.autoEl.on("click",".bx-start",N),c.controls.autoEl.on("click",".bx-stop",_),c.settings.autoControlsCombine?c.controls.autoEl.append(c.controls.start):c.controls.autoEl.append(c.controls.start).append(c.controls.stop),c.settings.autoControlsSelector?Y(c.settings.autoControlsSelector).html(c.controls.autoEl):c.controls.el.addClass("bx-has-controls-auto").append(c.controls.autoEl),k(c.settings.autoStart?"stop":"start")},S=function(){c.children.each(function(e){var t=Y(this).find("img:first").attr("title");void 0!==t&&(""+t).length&&Y(this).append('<div class="bx-caption"><span>'+t+"</span></div>")})},C=function(e){e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),u.goToNextSlide())},T=function(e){e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),u.goToPrevSlide())},N=function(e){u.startAuto(),e.preventDefault()},_=function(e){u.stopAuto(),e.preventDefault()},F=function(e){e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),void 0!==(e=Y(e.currentTarget)).attr("data-slide-index")&&(e=parseInt(e.attr("data-slide-index")))!==c.active.index&&u.goToSlide(e))},E=function(n){var e=c.children.length;"short"===c.settings.pagerType?(1<c.settings.maxSlides&&(e=Math.ceil(c.children.length/c.settings.maxSlides)),c.pagerEl.html(n+1+c.settings.pagerShortSeparator+e)):(c.pagerEl.find("a").removeClass("active"),c.pagerEl.each(function(e,t){Y(t).find("a").eq(n).addClass("active")}))},$=function(){var e;c.settings.infiniteLoop&&(e="",0===c.active.index?e=c.children.eq(0).position():c.active.index===h()-1&&c.carousel?e=c.children.eq((h()-1)*g()).position():c.active.index===c.children.length-1&&(e=c.children.eq(c.children.length-1).position()),e&&("horizontal"===c.settings.mode?v(-e.left,"reset",0):"vertical"===c.settings.mode&&v(-e.top,"reset",0))),c.working=!1,c.settings.onSlideAfter.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)},k=function(e){c.settings.autoControlsCombine?c.controls.autoEl.html(c.controls[e]):(c.controls.autoEl.find("a").removeClass("active"),c.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},P=function(){1===h()?(c.controls.prev.addClass("disabled"),c.controls.next.addClass("disabled")):!c.settings.infiniteLoop&&c.settings.hideControlOnEnd&&(0===c.active.index?(c.controls.prev.addClass("disabled"),c.controls.next):c.active.index===h()-1?(c.controls.next.addClass("disabled"),c.controls.prev):(c.controls.prev.removeClass("disabled"),c.controls.next)).removeClass("disabled")},A=function(){u.startAuto()},D=function(){u.stopAuto()},O=function(){0<c.settings.autoDelay?setTimeout(u.startAuto,c.settings.autoDelay):(u.startAuto(),Y(window).focus(A).blur(D)),c.settings.autoHover&&u.hover(function(){c.interval&&(u.stopAuto(!0),c.autoPaused=!0)},function(){c.autoPaused&&(u.startAuto(!0),c.autoPaused=null)})},z=function(){var e,t,n,o,i,r,s,a,l=0;"next"===c.settings.autoDirection?u.append(c.children.clone().addClass("bx-clone")):(u.prepend(c.children.clone().addClass("bx-clone")),e=c.children.first().position(),l="horizontal"===c.settings.mode?-e.left:-e.top),v(l,"reset",0),c.settings.pager=!1,c.settings.controls=!1,c.settings.autoControls=!1,c.settings.tickerHover&&(c.usingCSS?(o="horizontal"===c.settings.mode?4:5,c.viewport.hover(function(){t=u.css("-"+c.cssPrefix+"-transform"),n=parseFloat(t.split(",")[o]),v(n,"reset",0)},function(){a=0,c.children.each(function(e){a+="horizontal"===c.settings.mode?Y(this).outerWidth(!0):Y(this).outerHeight(!0)}),i=c.settings.speed/a,r="horizontal"===c.settings.mode?"left":"top",s=i*(a-Math.abs(parseInt(n))),L(s)})):c.viewport.hover(function(){u.stop()},function(){a=0,c.children.each(function(e){a+="horizontal"===c.settings.mode?Y(this).outerWidth(!0):Y(this).outerHeight(!0)}),i=c.settings.speed/a,r="horizontal"===c.settings.mode?"left":"top",s=i*(a-Math.abs(parseInt(u.css(r)))),L(s)})),L()},L=function(e){var e=e||c.settings.speed,t={left:0,top:0},n={left:0,top:0};"next"===c.settings.autoDirection?t=u.find(".bx-clone").first().position():n=c.children.first().position(),t="horizontal"===c.settings.mode?-t.left:-t.top,n="horizontal"===c.settings.mode?-n.left:-n.top,v(t,"ticker",e,{resetValue:n})},R=function(e){var t=Y(window),n={top:t.scrollTop(),left:t.scrollLeft()},o=e.offset();return n.right=n.left+t.width(),n.bottom=n.top+t.height(),o.right=o.left+e.outerWidth(),o.bottom=o.top+e.outerHeight(),!(n.right<o.left||n.left>o.right||n.bottom<o.top||n.top>o.bottom)},M=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&R(u))return 39===e.keyCode?(C(e),!1):37===e.keyCode?(T(e),!1):void 0},B=function(){c.touch={start:{x:0,y:0},end:{x:0,y:0}},c.viewport.on("touchstart MSPointerDown pointerdown",W),c.viewport.on("click",".bxslider a",function(e){c.viewport.hasClass("click-disabled")&&(e.preventDefault(),c.viewport.removeClass("click-disabled"))})},W=function(e){var t;"touchstart"!==e.type&&0!==e.button||(e.preventDefault(),c.controls.el.addClass("disabled"),c.working?c.controls.el.removeClass("disabled"):(c.touch.originalPos=u.position(),t=void 0!==(e=e.originalEvent).changedTouches?e.changedTouches:[e],"function"==typeof PointerEvent&&void 0===e.pointerId||(c.touch.start.x=t[0].pageX,c.touch.start.y=t[0].pageY,c.viewport.get(0).setPointerCapture&&(c.pointerId=e.pointerId,c.viewport.get(0).setPointerCapture(c.pointerId)),c.originalClickTarget=e.originalTarget||e.target,c.originalClickButton=e.button,c.originalClickButtons=e.buttons,c.originalEventType=e.type,c.hasMove=!1,c.viewport.on("touchmove MSPointerMove pointermove",I),c.viewport.on("touchend MSPointerUp pointerup",j),c.viewport.on("MSPointerCancel pointercancel",X))))},X=function e(t){t.preventDefault(),v(c.touch.originalPos.left,"reset",0),c.controls.el.removeClass("disabled"),c.viewport.off("MSPointerCancel pointercancel",e),c.viewport.off("touchmove MSPointerMove pointermove",I),c.viewport.off("touchend MSPointerUp pointerup",j),c.viewport.get(0).releasePointerCapture&&c.viewport.get(0).releasePointerCapture(c.pointerId)},I=function(e){var t=e.originalEvent,t=void 0!==t.changedTouches?t.changedTouches:[t],n=Math.abs(t[0].pageX-c.touch.start.x),o=Math.abs(t[0].pageY-c.touch.start.y),i=0,r=0;c.hasMove=!0,(o<3*n&&c.settings.preventDefaultSwipeX||n<3*o&&c.settings.preventDefaultSwipeY)&&e.preventDefault(),"touchmove"!==e.type&&e.preventDefault(),"fade"!==c.settings.mode&&c.settings.oneToOneTouch&&(i="horizontal"===c.settings.mode?(r=t[0].pageX-c.touch.start.x,c.touch.originalPos.left+r):(r=t[0].pageY-c.touch.start.y,c.touch.originalPos.top+r),v(i,"reset",0))},j=function e(t){t.preventDefault(),c.viewport.off("touchmove MSPointerMove pointermove",I),c.controls.el.removeClass("disabled");var t=t.originalEvent,t=void 0!==t.changedTouches?t.changedTouches:[t],n=0,o=0;c.touch.end.x=t[0].pageX,c.touch.end.y=t[0].pageY,"fade"===c.settings.mode?(o=Math.abs(c.touch.start.x-c.touch.end.x))>=c.settings.swipeThreshold&&(c.touch.start.x>c.touch.end.x?u.goToNextSlide():u.goToPrevSlide(),u.stopAuto()):(n="horizontal"===c.settings.mode?(o=c.touch.end.x-c.touch.start.x,c.touch.originalPos.left):(o=c.touch.end.y-c.touch.start.y,c.touch.originalPos.top),(c.settings.infiniteLoop||!(0===c.active.index&&0<o||c.active.last&&o<0))&&Math.abs(o)>=c.settings.swipeThreshold?(o<0?u.goToNextSlide():u.goToPrevSlide(),u.stopAuto()):v(n,"reset",200)),c.viewport.off("touchend MSPointerUp pointerup",e),c.viewport.get(0).releasePointerCapture&&c.viewport.get(0).releasePointerCapture(c.pointerId),!1!==c.hasMove||0!==c.originalClickButton&&"touchstart"!==c.originalEventType||Y(c.originalClickTarget).trigger({type:"click",button:c.originalClickButton,buttons:c.originalClickButtons})},q=function e(t){var n,o;c.initialized&&(c.working?window.setTimeout(e,10):(n=Y(window).width(),o=Y(window).height(),r===n&&s===o||(r=n,s=o,u.redrawSlider(),c.settings.onSliderResize.call(u,c.active.index))))},H=function(e){var t=f();c.settings.ariaHidden&&!c.settings.ticker&&(c.children.attr("aria-hidden","true"),c.children.slice(e,e+t).attr("aria-hidden","false"))},u.goToSlide=function(e,t){var n,o=!0,i=0,r={left:0,top:0},s=null;c.oldIndex=c.active.index,c.active.index=(n=e)<0?c.settings.infiniteLoop?h()-1:c.active.index:n>=h()?c.settings.infiniteLoop?0:c.active.index:n,c.working||c.active.index===c.oldIndex||(c.working=!0,void 0===(o=c.settings.onSlideBefore.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index))||o?("next"===t?c.settings.onSlideNext.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)||(o=!1):"prev"!==t||c.settings.onSlidePrev.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)||(o=!1),c.active.last=c.active.index>=h()-1,(c.settings.pager||c.settings.pagerCustom)&&E(c.active.index),c.settings.controls&&P(),"fade"===c.settings.mode?(c.settings.adaptiveHeight&&c.viewport.height()!==l()&&c.viewport.animate({height:l()},c.settings.adaptiveHeightSpeed),c.children.filter(":visible").fadeOut(c.settings.speed).css({zIndex:0}),c.children.eq(c.active.index).css("zIndex",c.settings.slideZIndex+1).fadeIn(c.settings.speed,function(){Y(this).css("zIndex",c.settings.slideZIndex),$()})):(c.settings.adaptiveHeight&&c.viewport.height()!==l()&&c.viewport.animate({height:l()},c.settings.adaptiveHeightSpeed),!c.settings.infiniteLoop&&c.carousel&&c.active.last?"horizontal"===c.settings.mode?(r=(s=c.children.eq(c.children.length-1)).position(),i=c.viewport.width()-s.outerWidth()):(n=c.children.length-c.settings.minSlides,r=c.children.eq(n).position()):c.carousel&&c.active.last&&"prev"===t?(o=1===c.settings.moveSlides?c.settings.maxSlides-g():(h()-1)*g()-(c.children.length-c.settings.maxSlides),r=(s=u.children(".bx-clone").eq(o)).position()):"next"===t&&0===c.active.index?(r=u.find("> .bx-clone").eq(c.settings.maxSlides).position(),c.active.last=!1):0<=e&&(n=e*parseInt(g()),r=c.children.eq(n).position()),void 0!==r&&(o="horizontal"===c.settings.mode?-(r.left-i):-r.top,v(o,"slide",c.settings.speed)),c.working=!1),c.settings.ariaHidden&&H(c.active.index*g())):(c.active.index=c.oldIndex,c.working=!1))},u.goToNextSlide=function(){var e;!c.settings.infiniteLoop&&c.active.last||!0===c.working||(e=parseInt(c.active.index)+1,u.goToSlide(e,"next"))},u.goToPrevSlide=function(){var e;!c.settings.infiniteLoop&&0===c.active.index||!0===c.working||(e=parseInt(c.active.index)-1,u.goToSlide(e,"prev"))},u.startAuto=function(e){c.interval||(c.interval=setInterval(function(){"next"===c.settings.autoDirection?u.goToNextSlide():u.goToPrevSlide()},c.settings.pause),c.settings.onAutoChange.call(u,!0),c.settings.autoControls&&!0!==e&&k("stop"))},u.stopAuto=function(e){c.autoPaused&&(c.autoPaused=!1),c.interval&&(clearInterval(c.interval),c.interval=null,c.settings.onAutoChange.call(u,!1),c.settings.autoControls&&!0!==e&&k("start"))},u.getCurrentSlide=function(){return c.active.index},u.getCurrentSlideElement=function(){return c.children.eq(c.active.index)},u.getSlideElement=function(e){return c.children.eq(e)},u.getSlideCount=function(){return c.children.length},u.isWorking=function(){return c.working},u.redrawSlider=function(){c.children.add(u.find(".bx-clone")).outerWidth(p()),c.viewport.css("height",l()),c.settings.ticker||m(),c.active.last&&(c.active.index=h()-1),c.active.index>=h()&&(c.active.last=!0),c.settings.pager&&!c.settings.pagerCustom&&(y(),E(c.active.index)),c.settings.ariaHidden&&H(c.active.index*g())},u.destroySlider=function(){c.initialized&&(c.initialized=!1,Y(".bx-clone",this).remove(),c.children.each(function(){void 0!==Y(this).data("origStyle")?Y(this).attr("style",Y(this).data("origStyle")):Y(this).removeAttr("style")}),void 0!==Y(this).data("origStyle")?this.attr("style",Y(this).data("origStyle")):Y(this).removeAttr("style"),Y(this).unwrap().unwrap(),c.controls.el&&c.controls.el.remove(),c.controls.next&&c.controls.next.remove(),c.controls.prev&&c.controls.prev.remove(),c.pagerEl&&c.settings.controls&&!c.settings.pagerCustom&&c.pagerEl.remove(),Y(".bx-caption",this).remove(),c.controls.autoEl&&c.controls.autoEl.remove(),clearInterval(c.interval),c.settings.responsive&&Y(window).off("resize",q),c.settings.keyboardEnabled&&Y(document).off("keydown",M),Y(this).removeData("bxSlider"),Y(window).off("blur",D).off("focus",A))},u.reloadSlider=function(e){void 0!==e&&(t=e),u.destroySlider(),n(),Y(u).data("bxSlider",this)},n(),Y(u).data("bxSlider",this),this))}}(jQuery),function(l,s,h,g){var i,r,a,u,t,c,p,d,o,e,n,f,m;function v(e,t){var n,o,i,r=[],s=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},n=(t=e&&e.data?d(e.data.options,t):t).$target||h(e.currentTarget).trigger("blur"),(i=h.fancybox.getInstance())&&i.$trigger&&i.$trigger.is(n)||(r=t.selector?h(t.selector):(o=n.attr("data-fancybox")||"")?(r=e.data?e.data.items:[]).length?r.filter('[data-fancybox="'+o+'"]'):h('[data-fancybox="'+o+'"]'):[n],s=h(r).index(n),(i=h.fancybox.open(r,t,s=s<0?0:s)).$trigger=n))}l.console=l.console||{info:function(e){}},h&&(h.fn.fancybox?console.info("fancyBox already initialized"):(e={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:h.noop,beforeLoad:h.noop,afterLoad:h.noop,beforeShow:h.noop,afterShow:h.noop,beforeClose:h.noop,afterClose:h.noop,onActivate:h.noop,onDeactivate:h.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},i=h(l),r=h(s),a=0,u=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},t=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},c=function(){var e,t=s.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in n)if(t.style[e]!==g)return n[e];return"transitionend"}(),p=function(e){return e&&e.length&&e[0].offsetHeight},d=function(e,t){var n=h.extend(!0,{},e,t);return h.each(t,function(e,t){h.isArray(t)&&(n[e]=t)}),n},h.extend((o=function(e,t,n){var o=this;o.opts=d({index:n},h.fancybox.defaults),h.isPlainObject(t)&&(o.opts=d(o.opts,t)),h.fancybox.isMobile&&(o.opts=d(o.opts,o.opts.mobile)),o.id=o.opts.id||++a,o.currIndex=parseInt(o.opts.index,10)||0,o.prevIndex=null,o.prevPos=null,o.currPos=0,o.firstRun=!0,o.group=[],o.slides={},o.addContent(e),o.group.length&&o.init()}).prototype,{init:function(){var t,n,o=this,i=o.group[o.currIndex].opts;i.closeExisting&&h.fancybox.close(!0),h("body").addClass("fancybox-active"),!h.fancybox.getInstance()&&!1!==i.hideScrollbar&&!h.fancybox.isMobile&&s.body.scrollHeight>l.innerHeight&&(h("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-s.documentElement.clientWidth)+"px;}</style>"),h("body").addClass("compensate-for-scrollbar")),n="",h.each(i.buttons,function(e,t){n+=i.btnTpl[t]||""}),t=h(o.translate(o,i.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",i.btnTpl.arrowLeft+i.btnTpl.arrowRight))).attr("id","fancybox-container-"+o.id).addClass(i.baseClass).data("FancyBox",o).appendTo(i.parentEl),o.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){o.$refs[e]=t.find(".fancybox-"+e)}),o.trigger("onInit"),o.activate(),o.jumpTo(o.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){return n[t]===g?e:n[t]})},addContent:function(e){var s=this,e=h.makeArray(e);h.each(e,function(e,t){var n,o,i={},r={};h.isPlainObject(t)?r=(i=t).opts||t:"object"===h.type(t)&&h(t).length?(r=(n=h(t)).data()||{},(r=h.extend(!0,{},r,r.options)).$orig=n,i.src=s.opts.src||r.src||n.attr("href"),i.type||i.src||(i.type="inline",i.src=t)):i={type:"html",src:t+""},i.opts=h.extend(!0,{},s.opts,r),h.isArray(r.buttons)&&(i.opts.buttons=r.buttons),h.fancybox.isMobile&&i.opts.mobile&&(i.opts=d(i.opts,i.opts.mobile)),n=i.type||i.opts.type,r=i.src||"",!n&&r&&((o=r.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(n="video",i.opts.video.format||(i.opts.video.format="video/"+("ogv"===o[1]?"ogg":o[1]))):r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":r.match(/\.(pdf)((\?|#).*)?$/i)?i=h.extend(!0,i,{contentType:"pdf",opts:{iframe:{preload:!(n="iframe")}}}):"#"===r.charAt(0)&&(n="inline")),n?i.type=n:s.trigger("objectNeedsType",i),i.contentType||(i.contentType=-1<h.inArray(i.type,["html","inline","ajax"])?"html":i.type),i.index=s.group.length,"auto"==i.opts.smallBtn&&(i.opts.smallBtn=-1<h.inArray(i.type,["html","inline","ajax"])),"auto"===i.opts.toolbar&&(i.opts.toolbar=!i.opts.smallBtn),i.$thumb=i.opts.$thumb||null,i.opts.$trigger&&i.index===s.opts.index&&(i.$thumb=i.opts.$trigger.find("img:first"),i.$thumb.length&&(i.opts.$orig=i.opts.$trigger)),i.$thumb&&i.$thumb.length||!i.opts.$orig||(i.$thumb=i.opts.$orig.find("img:first")),i.$thumb&&!i.$thumb.length&&(i.$thumb=null),i.thumb=i.opts.thumb||(i.$thumb?i.$thumb[0].src:null),"function"===h.type(i.opts.caption)&&(i.opts.caption=i.opts.caption.apply(t,[s,i])),"function"===h.type(s.opts.caption)&&(i.opts.caption=s.opts.caption.apply(t,[s,i])),i.opts.caption instanceof h||(i.opts.caption=i.opts.caption===g?"":i.opts.caption+""),"ajax"===i.type&&1<(o=r.split(/\s+/,2)).length&&(i.src=o.shift(),i.opts.filter=o.shift()),i.opts.modal&&(i.opts=h.extend(!0,i.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),s.group.push(i)}),Object.keys(s.slides).length&&(s.updateControls(),(e=s.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var o=this;o.removeEvents(),o.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),o.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),o.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),o.next()}).on("click.fb","[data-fancybox-zoom]",function(e){o[o.isScaledDown()?"scaleToActual":"scaleToFit"]()}),i.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(o.requestId&&t(o.requestId),o.requestId=u(function(){o.update(e)})):(o.current&&"iframe"===o.current.type&&o.$refs.stage.hide(),setTimeout(function(){o.$refs.stage.show(),o.update(e)},h.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(e){var t=(h.fancybox?h.fancybox.getInstance():null).current,n=e.keyCode||e.which;9==n?t.opts.trapFocus&&o.focus(e):!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||h(e.target).is("input,textarea,video,audio,select")||(8===n||27===n?(e.preventDefault(),o.close(e)):37===n||38===n?(e.preventDefault(),o.previous()):39===n||40===n?(e.preventDefault(),o.next()):o.trigger("afterKeydown",e,n))}),o.group[o.currIndex].opts.idleTime&&(o.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){o.idleSecondsCounter=0,o.isIdle&&o.showControls(),o.isIdle=!1}),o.idleInterval=l.setInterval(function(){o.idleSecondsCounter++,o.idleSecondsCounter>=o.group[o.currIndex].opts.idleTime&&!o.isDragging&&(o.isIdle=!0,o.idleSecondsCounter=0,o.hideControls())},1e3))},removeEvents:function(){i.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,o){var t,n,i,r,s,a,l,c,u=this,d=u.group.length;if(!(u.isDragging||u.isClosing||u.isAnimating&&u.firstRun)){if(e=parseInt(e,10),!(n=(u.current||u).opts.loop)&&(e<0||d<=e))return!1;t=u.firstRun=!Object.keys(u.slides).length,r=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,i=u.createSlide(e),1<d&&((n||i.index<d-1)&&u.createSlide(e+1),(n||0<i.index)&&u.createSlide(e-1)),u.current=i,u.currIndex=i.index,u.currPos=i.pos,u.trigger("beforeShow",t),u.updateControls(),i.forcedDuration=g,h.isNumeric(o)?i.forcedDuration=o:o=i.opts[t?"animationDuration":"transitionDuration"],o=parseInt(o,10),d=u.isMoved(i),i.$slide.addClass("fancybox-slide--current"),t?(i.opts.animationEffect&&o&&u.$refs.container.css("transition-duration",o+"ms"),u.$refs.container.addClass("fancybox-is-open").trigger("focus"),u.loadSlide(i)):(s=h.fancybox.getTranslate(r.$slide),a=h.fancybox.getTranslate(u.$refs.stage),h.each(u.slides,function(e,t){h.fancybox.stop(t.$slide,!0)}),r.pos!==i.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),d?(c=s.left-(r.pos*s.width+r.pos*r.opts.gutter),h.each(u.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=t.pos*s.width+t.pos*t.opts.gutter;h.fancybox.setTranslate(t.$slide,{top:0,left:n-a.left+c}),t.pos!==i.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>i.pos?"next":"previous")),p(t.$slide),h.fancybox.animate(t.$slide,{top:0,left:(t.pos-i.pos)*s.width+(t.pos-i.pos)*t.opts.gutter},o,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===u.currPos&&u.complete()})})):o&&i.opts.transitionEffect&&(l="fancybox-animated fancybox-fx-"+i.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>i.pos?"next":"previous")),h.fancybox.animate(r.$slide,l,o,function(){r.$slide.removeClass(l).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),i.isLoaded?u.revealContent(i):u.loadSlide(i)),u.preload("image")}},createSlide:function(e){var t,n=this,o=e%n.group.length;return o=o<0?n.group.length+o:o,!n.slides[e]&&n.group[o]&&(t=h('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[e]=h.extend(!0,{},n.group[o],{pos:e,$slide:t,isLoaded:!1}),n.updateSlide(n.slides[e])),n.slides[e]},scaleToActual:function(e,t,n){var o,i,r,s,a=this,l=a.current,c=l.$content,u=h.fancybox.getTranslate(l.$slide).width,d=h.fancybox.getTranslate(l.$slide).height,p=l.width,f=l.height;a.isAnimating||a.isMoved()||!c||"image"!=l.type||!l.isLoaded||l.hasError||(a.isAnimating=!0,h.fancybox.stop(c),e=e===g?.5*u:e,t=t===g?.5*d:t,(o=h.fancybox.getTranslate(c)).top-=h.fancybox.getTranslate(l.$slide).top,o.left-=h.fancybox.getTranslate(l.$slide).left,l=p/o.width,s=f/o.height,i=.5*u-.5*p,r=.5*d-.5*f,u<p&&(i=0<(i=o.left*l-(e*l-e))?0:i)<u-p&&(i=u-p),d<f&&(r=0<(r=o.top*s-(t*s-t))?0:r)<d-f&&(r=d-f),a.updateCursor(p,f),h.fancybox.animate(c,{top:r,left:i,scaleX:l,scaleY:s},n||366,function(){a.isAnimating=!1}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop())},scaleToFit:function(e){var t=this,n=t.current,o=n.$content;t.isAnimating||t.isMoved()||!o||"image"!=n.type||!n.isLoaded||n.hasError||(t.isAnimating=!0,h.fancybox.stop(o),n=t.getFitPos(n),t.updateCursor(n.width,n.height),h.fancybox.animate(o,{top:n.top,left:n.left,scaleX:n.width/o.width(),scaleY:n.height/o.height()},e||366,function(){t.isAnimating=!1}))},getFitPos:function(e){var t,n,o=e.$content,i=e.$slide,r=e.width||e.opts.width,s=e.height||e.opts.height,a={};return!!(e.isLoaded&&o&&o.length)&&(t=h.fancybox.getTranslate(this.$refs.stage).width,n=h.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(i.css("paddingLeft"))+parseFloat(i.css("paddingRight"))+parseFloat(o.css("marginLeft"))+parseFloat(o.css("marginRight")),n-=parseFloat(i.css("paddingTop"))+parseFloat(i.css("paddingBottom"))+parseFloat(o.css("marginTop"))+parseFloat(o.css("marginBottom")),r&&s||(r=t,s=n),t-.5<(r*=o=Math.min(1,t/r,n/s))&&(r=t),n-.5<(s*=o)&&(s=n),"image"===e.type?(a.top=Math.floor(.5*(n-s))+parseFloat(i.css("paddingTop")),a.left=Math.floor(.5*(t-r))+parseFloat(i.css("paddingLeft"))):"video"===e.contentType&&(r/(o=e.opts.width&&e.opts.height?r/s:e.opts.ratio||16/9)<s?s=r/o:s*o<r&&(r=s*o)),a.width=r,a.height=s,a)},update:function(n){var o=this;h.each(o.slides,function(e,t){o.updateSlide(t,n)})},updateSlide:function(e,t){var n=this,o=e&&e.$content,i=e.width||e.opts.width,r=e.height||e.opts.height,s=e.$slide;n.adjustCaption(e),o&&(i||r||"video"===e.contentType)&&!e.hasError&&(h.fancybox.stop(o),h.fancybox.setTranslate(o,n.getFitPos(e)),e.pos===n.currPos&&(n.isAnimating=!1,n.updateCursor())),n.adjustLayout(e),s.length&&(s.trigger("refresh"),e.pos===n.currPos&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",s.get(0).scrollHeight>s.get(0).clientHeight)),n.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,n=t.current,o=n.$slide;!t.isClosing&&n&&(o.siblings().css({transform:"",opacity:""}),o.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),h.fancybox.animate(o,{top:0,left:0,opacity:1},e===g?0:e,function(){o.css({transform:"",opacity:""}),n.isComplete||t.complete()},!1))},isMoved:function(e){var t,n,e=e||this.current;return!!e&&(n=h.fancybox.getTranslate(this.$refs.stage),t=h.fancybox.getTranslate(e.$slide),!e.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-n.top)||.5<Math.abs(t.left-n.left)))},updateCursor:function(e,t){var n=this,o=n.current,i=n.$refs.container;o&&!n.isClosing&&n.Guestures&&(i.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),t=!!(e=n.canPan(e,t))||n.isZoomable(),i.toggleClass("fancybox-is-zoomable",t),h("[data-fancybox-zoom]").prop("disabled",!t),e?i.addClass("fancybox-can-pan"):t&&("zoom"===o.opts.clickContent||h.isFunction(o.opts.clickContent)&&"zoom"==o.opts.clickContent(o))?i.addClass("fancybox-can-zoomIn"):o.opts.touch&&(o.opts.touch.vertical||1<n.group.length)&&"video"!==o.contentType&&i.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var n=!1,o=this.current,i=o.$content;return e!==g&&t!==g?n=e<o.width&&t<o.height:i&&(n=(n=h.fancybox.getTranslate(i)).width<o.width&&n.height<o.height),n},canPan:function(e,t){var n=this.current,o=null,i=!1;return"image"===n.type&&(n.isComplete||e&&t)&&!n.hasError&&(i=this.getFitPos(n),e!==g&&t!==g?o={width:e,height:t}:n.isComplete&&(o=h.fancybox.getTranslate(n.$content)),o&&(i=i&&(1.5<Math.abs(o.width-i.width)||1.5<Math.abs(o.height-i.height)))),i},loadSlide:function(n){var e,t,o,i=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===i.trigger("beforeLoad",n))return n.isLoading=!1;switch(e=n.type,(t=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),e){case"image":i.setImage(n);break;case"iframe":i.setIframe(n);break;case"html":i.setContent(n,n.src||n.content);break;case"video":i.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":h(n.src).length?i.setContent(n,h(n.src)):i.setError(n);break;case"ajax":i.showLoading(n),o=h.ajax(h.extend({},n.opts.ajax.settings,{url:n.src,success:function(e,t){"success"===t&&i.setContent(n,e)},error:function(e,t){e&&"abort"!==t&&i.setError(n)}})),t.one("onReset",function(){o.abort()});break;default:i.setError(n)}return!0}},setImage:function(t){var e,n=this;setTimeout(function(){var e=t.$image;n.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||n.showLoading(t)},50),n.checkSrcset(t),t.$content=h('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=s.createElement("img")).onerror=function(){h(this).remove(),t.$ghost=null},e.onload=function(){n.afterLoad(t)},t.$ghost=h(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),n.setBigImage(t)},checkSrcset:function(e){var t,n,o,i,r=e.opts.srcset||e.opts.image.srcset;if(r){o=l.devicePixelRatio||1,i=l.innerWidth*o,(n=r.split(",").map(function(e){var o={};return e.trim().split(/\s+/).forEach(function(e,t){var n=parseInt(e.substring(0,e.length-1),10);if(0===t)return o.url=e;n&&(o.value=n,o.postfix=e[e.length-1])}),o})).sort(function(e,t){return e.value-t.value});for(var s=0;s<n.length;s++){var a=n[s];if("w"===a.postfix&&a.value>=i||"x"===a.postfix&&a.value>=o){t=a;break}}(t=!t&&n.length?n[n.length-1]:t)&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=r)}},setBigImage:function(t){var n=this,e=s.createElement("img"),o=h(e);t.$image=o.one("error",function(){n.setError(t)}).one("load",function(){var e;t.$ghost||(n.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),n.afterLoad(t)),n.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<i.width()/i.height()?"100":Math.round(t.width/t.height*100))+"vw"),o.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!n.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),n.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&o.naturalWidth&&o.naturalHeight?o.trigger("load"):e.error&&o.trigger("error")},resolveImageSlideSize:function(e,t,n){var o=parseInt(e.opts.width,10),i=parseInt(e.opts.height,10);e.width=t,e.height=n,0<o&&(e.width=o,e.height=Math.floor(o*n/t)),0<i&&(e.width=Math.floor(i*t/n),e.height=i)},setIframe:function(i){var r,t=this,s=i.opts.iframe,a=i.$slide;i.$content=h('<div class="fancybox-content'+(s.preload?" fancybox-is-hidden":"")+'"></div>').css(s.css).appendTo(a),a.addClass("fancybox-slide--"+i.contentType),i.$iframe=r=h(s.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(s.attr).appendTo(i.$content),s.preload?(t.showLoading(i),r.on("load.fb error.fb",function(e){this.isReady=1,i.$slide.trigger("refresh"),t.afterLoad(i)}),a.on("refresh.fb",function(){var e,t=i.$content,n=s.css.width,o=s.css.height;if(1===r[0].isReady){try{e=r.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(a.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),n===g&&(n=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",n||"").css("max-width",""),o===g&&(o=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",o||""),a.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(i),r.attr("src",i.src),a.one("onReset",function(){try{h(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}h(this).off("refresh.fb").empty(),i.isLoaded=!1,i.isRevealed=!1})},setContent:function(e,t){var n;this.isClosing||(this.hideLoading(e),e.$content&&h.fancybox.stop(e.$content),e.$slide.empty(),(n=t)&&n.hasOwnProperty&&n instanceof h&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=h("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===h.type(t)&&(t=h("<div>").append(h.trim(t)).contents()),e.opts.filter&&(t=h("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){h(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(h(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),h(t).appendTo(e.$slide),h(t).is("video,audio")&&(h(t).addClass("fancybox-video"),h(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||h(t).attr("width"),e.opts.height=e.opts.height||h(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=h(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=h(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&h('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t=this,e=e||t.current,n=e.opts.caption,o=e.opts.preventCaptionOverlap,i=t.$refs.caption,r=!1;i.toggleClass("fancybox-caption--separate",o),o&&n&&n.length&&(e.pos!==t.currPos?((o=i.clone().appendTo(i.parent())).children().eq(0).empty().html(n),r=o.outerHeight(!0),o.empty().remove()):t.$caption&&(r=t.$caption.outerHeight(!0)),e.$slide.css("padding-bottom",r||""))},adjustLayout:function(e){var t,n,o,i,e=e||this.current;e.isLoaded&&!0!==e.opts.disableLayoutFix&&(e.$content.css("margin-bottom",""),e.$content.outerHeight()>e.$slide.height()+.5&&(o=e.$slide[0].style["padding-bottom"],i=e.$slide.css("padding-bottom"),0<parseFloat(i)&&(t=e.$slide[0].scrollHeight,e.$slide.css("padding-bottom",0),Math.abs(t-e.$slide[0].scrollHeight)<1&&(n=i),e.$slide.css("padding-bottom",o))),e.$content.css("margin-bottom",n))},revealContent:function(e){var t,n,o,i,r=this,s=e.$slide,a=!1,l=!1,c=r.isMoved(e),u=e.isRevealed;e.isRevealed=!0,t=e.opts[r.firstRun?"animationEffect":"transitionEffect"],o=e.opts[r.firstRun?"animationDuration":"transitionDuration"],o=parseInt(e.forcedDuration===g?o:e.forcedDuration,10),"zoom"===(t=!c&&e.pos===r.currPos&&o?t:!1)&&(e.pos===r.currPos&&o&&"image"===e.type&&!e.hasError&&(l=r.getThumbPos(e))?a=r.getFitPos(e):t="fade"),"zoom"===t?(r.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,(i="auto"==(i=e.opts.zoomOpacity)?.1<Math.abs(e.width/e.height-l.width/l.height):i)&&(l.opacity=.1,a.opacity=1),h.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),p(e.$content),h.fancybox.animate(e.$content,a,o,function(){r.isAnimating=!1,r.complete()})):(r.updateSlide(e),t?(h.fancybox.stop(s),n="fancybox-slide--"+(e.pos>=r.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,s.addClass(n).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),p(s),"image"!==e.type&&e.$content.hide().show(0),h.fancybox.animate(s,"fancybox-slide--current",o,function(){s.removeClass(n).css({transform:"",opacity:""}),e.pos===r.currPos&&r.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),u||!c||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),e.pos===r.currPos&&r.complete()))},getThumbPos:function(e){var t,n,o,i,e=e.$thumb;return!!(e&&(o=e[0])&&o.ownerDocument===s&&(h(".fancybox-container").css("pointer-events","none"),i={x:o.getBoundingClientRect().left+o.offsetWidth/2,y:o.getBoundingClientRect().top+o.offsetHeight/2},i=s.elementFromPoint(i.x,i.y)===o,h(".fancybox-container").css("pointer-events",""),i))&&(o=h.fancybox.getTranslate(e),i=parseFloat(e.css("border-top-width")||0),t=parseFloat(e.css("border-right-width")||0),n=parseFloat(e.css("border-bottom-width")||0),e=parseFloat(e.css("border-left-width")||0),t={top:o.top+i,left:o.left+e,width:o.width-t-e,height:o.height-i-n,scaleX:1,scaleY:1},0<o.width&&0<o.height&&t)},complete:function(){var e,n=this,t=n.current,o={};!n.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),n.preload("inline"),p(t.$slide),t.$slide.addClass("fancybox-slide--complete"),h.each(n.slides,function(e,t){t.pos>=n.currPos-1&&t.pos<=n.currPos+1?o[t.pos]=t:t&&(h.fancybox.stop(t.$slide),t.$slide.off().remove())}),n.slides=o),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):n.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,n,o=this;o.group.length<2||(n=o.slides[o.currPos+1],(t=o.slides[o.currPos-1])&&t.type===e&&o.loadSlide(t),n&&n.type===e&&o.loadSlide(n))},focus:function(e,t){var n=this,o=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");n.isClosing||((t=(t=!e&&n.current&&n.current.isComplete?n.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):n.$refs.container.find("*:visible")).filter(o).filter(function(){return"hidden"!==h(this).css("visibility")&&!h(this).hasClass("disabled")})).length?(o=t.index(s.activeElement),e&&e.shiftKey?(o<0||0==o)&&(e.preventDefault(),t.eq(t.length-1).trigger("focus")):(o<0||o==t.length-1)&&(e&&e.preventDefault(),t.eq(0).trigger("focus"))):n.$refs.container.trigger("focus"))},activate:function(){var t=this;h(".fancybox-container").each(function(){var e=h(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function n(){l.cleanUp(e)}var o,i,r,s,a,l=this,c=l.current;return!l.isClosing&&(!(l.isClosing=!0)===l.trigger("beforeClose",e)?(l.isClosing=!1,u(function(){l.update()}),!1):(l.removeEvents(),i=c.$content,o=c.opts.animationEffect,t=h.isNumeric(t)?t:o?c.opts.animationDuration:0,c.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?h.fancybox.stop(c.$slide):o=!1,c.$slide.siblings().trigger("onReset").remove(),t&&l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",t+"ms"),l.hideLoading(c),l.hideControls(!0),l.updateCursor(),"zoom"===(o="zoom"!==o||i&&t&&"image"===c.type&&!l.isMoved()&&!c.hasError&&(a=l.getThumbPos(c))?o:"fade")?(h.fancybox.stop(i),s={top:(s=h.fancybox.getTranslate(i)).top,left:s.left,scaleX:s.width/a.width,scaleY:s.height/a.height,width:a.width,height:a.height},(r="auto"==(r=c.opts.zoomOpacity)?.1<Math.abs(c.width/c.height-a.width/a.height):r)&&(a.opacity=0),h.fancybox.setTranslate(i,s),p(i),h.fancybox.animate(i,a,t,n)):o&&t?h.fancybox.animate(c.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+o,t,n):!0===e?setTimeout(n,t):n(),!0))},cleanUp:function(e){var t,n=this,o=n.current.opts.$orig;n.current.$slide.trigger("onReset"),n.$refs.container.empty().remove(),n.trigger("afterClose",e),n.current.opts.backFocus&&(o=o&&o.length&&o.is(":visible")?o:n.$trigger)&&o.length&&(e=l.scrollX,t=l.scrollY,o.trigger("focus"),h("html, body").scrollTop(t).scrollLeft(e)),n.current=null,(o=h.fancybox.getInstance())?o.activate():(h("body").removeClass("fancybox-active compensate-for-scrollbar"),h("#fancybox-style-noscroll").remove())},trigger:function(e,t){var n,o=Array.prototype.slice.call(arguments,1),i=this,t=t&&t.opts?t:i.current;if(t?o.unshift(t):t=i,o.unshift(i),!1===(n=h.isFunction(t.opts[e])?t.opts[e].apply(t,o):n))return n;("afterClose"!==e&&i.$refs?i.$refs.container:r).trigger(e+".fb",o)},updateControls:function(){var e=this,t=e.current,n=t.index,o=e.$refs.container,i=e.$refs.caption,r=t.opts.caption;t.$slide.trigger("refresh"),r&&r.length?(e.$caption=i).children().eq(0).html(r):e.$caption=null,e.hasHiddenControls||e.isIdle||e.showControls(),o.find("[data-fancybox-count]").html(e.group.length),o.find("[data-fancybox-index]").html(n+1),o.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&n<=0),o.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&n>=e.group.length-1),"image"===t.type?o.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&o.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),h(s.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=(e.current||e).opts,n=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),h.fancybox={version:"3.5.7",defaults:e,getInstance:function(e){var t=h('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return t instanceof o&&("string"===h.type(e)?t[e].apply(t,n):"function"===h.type(e)&&e.apply(t,n),t)},open:function(e,t,n){return new o(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(e=s.createElement("div"),l.getComputedStyle&&l.getComputedStyle(e)&&l.getComputedStyle(e).getPropertyValue("transform")&&!(s.documentMode&&s.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var n="",o={};if(e&&t)return t.left===g&&t.top===g||(n=(t.left===g?e.position():t).left+"px, "+(t.top===g?e.position():t).top+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==g&&t.scaleY!==g?n+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==g&&(n+=" scaleX("+t.scaleX+")"),n.length&&(o.transform=n),t.opacity!==g&&(o.opacity=t.opacity),t.width!==g&&(o.width=t.width),t.height!==g&&(o.height=t.height),e.css(o)},animate:function(t,n,o,i,r){var s,a=this;h.isFunction(o)&&(i=o,o=null),a.stop(t),s=a.getTranslate(t),t.on(c,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(a.stop(t),h.isNumeric(o)&&t.css("transition-duration",""),h.isPlainObject(n)?n.scaleX!==g&&n.scaleY!==g&&a.setTranslate(t,{top:n.top,left:n.left,width:s.width*n.scaleX,height:s.height*n.scaleY,scaleX:1,scaleY:1}):!0!==r&&t.removeClass(n),h.isFunction(i)&&i(e))}),h.isNumeric(o)&&t.css("transition-duration",o+"ms"),h.isPlainObject(n)?(n.scaleX!==g&&n.scaleY!==g&&(delete n.width,delete n.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),h.fancybox.setTranslate(t,n)):t.addClass(n),t.data("timer",setTimeout(function(){t.trigger(c)},o+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(c),e.off(c).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},h.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?h("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},v):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},v),this},r.on("click.fb-start","[data-fancybox]",v),r.on("click.fb-start","[data-fancybox-trigger]",function(e){h('[data-fancybox="'+h(this).attr("data-fancybox-trigger")+'"]').eq(h(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:h(this)})}),n=".fancybox-button",f="fancybox-focus",m=null,r.on("mousedown mouseup focus blur",n,function(e){switch(e.type){case"mousedown":m=h(this);break;case"mouseup":m=null;break;case"focusin":h(n).removeClass(f),h(this).is(m)||h(this).is("[disabled]")||h(this).addClass(f);break;case"focusout":h(n).removeClass(f)}})))}(window,document,jQuery),function(f){function h(n,e,t){if(n)return"object"===f.type(t=t||"")&&(t=f.param(t,!0)),f.each(e,function(e,t){n=n.replace("$"+e,t||"")}),t.length&&(n+=(0<n.indexOf("?")?"&":"?")+t),n}var o={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}},i=(f(document).on("objectNeedsType.fb",function(e,t,i){var r,s,a,l,c,u,d=i.src||"",p=!1,n=f.extend(!0,{},o,i.opts.media);f.each(n,function(e,t){if(s=d.match(t.matcher)){if(p=t.type,u=e,c={},t.paramPlace&&s[t.paramPlace]){l=(l="?"==(l=s[t.paramPlace])[0]?l.substring(1):l).split("&");for(var n=0;n<l.length;++n){var o=l[n].split("=",2);2==o.length&&(c[o[0]]=decodeURIComponent(o[1].replace(/\+/g," ")))}}return a=f.extend(!0,{},t.params,i.opts[e],c),d="function"===f.type(t.url)?t.url.call(this,s,a,i):h(t.url,s,a),r="function"===f.type(t.thumb)?t.thumb.call(this,s,a,i):h(t.thumb,s),"youtube"===e?d=d.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,n,o){return"&start="+((n?60*parseInt(n,10):0)+parseInt(o,10))}):"vimeo"===e&&(d=d.replace("&%23","#")),!1}}),p?(i.opts.thumb||i.opts.$thumb&&i.opts.$thumb.length||(i.opts.thumb=r),"iframe"===p&&(i.opts=f.extend(!0,i.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),f.extend(i,{type:p,src:d,origSrc:i.src,contentSource:u,contentType:"image"===p?"image":"gmap_place"==u||"gmap_search"==u?"map":"video"})):d&&(i.type=i.opts.defaultType)}),{youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,n=this;this[e].loaded?setTimeout(function(){n.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){n[e].loaded=!0,n.done(e)}:t.onload=function(){n[e].loaded=!0,n.done(e)},document.body.appendChild(t))},done:function(e){var t,n;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=f.fancybox.getInstance())&&(n=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){t.next()}))}});f(document).on({"afterShow.fb":function(e,t,n){1<t.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&i.load(n.contentSource)}})}(jQuery),function(u,l,d){function p(e){var t,n=[];for(t in e=(e=e.originalEvent||e||u.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[t].pageX?n.push({x:e[t].pageX,y:e[t].pageY}):e[t].clientX&&n.push({x:e[t].clientX,y:e[t].clientY});return n}function f(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function c(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||d.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,n=e[0].attributes,o=n.length;t<o;t++)if("data-fancybox-"===n[t].nodeName.substr(0,14))return 1}function h(e){for(var t,n,o,i=!1;(t=e.get(0),o=n=o=n=void 0,n=u.getComputedStyle(t)["overflow-y"],o=u.getComputedStyle(t)["overflow-x"],n=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,o=("scroll"===o||"auto"===o)&&t.scrollWidth>t.clientWidth,!(i=n||o))&&((e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body")););return i}function n(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",d.proxy(t,"ontouchstart"))}var g=u.requestAnimationFrame||u.webkitRequestAnimationFrame||u.mozRequestAnimationFrame||u.oRequestAnimationFrame||function(e){return u.setTimeout(e,1e3/60)},m=u.cancelAnimationFrame||u.webkitCancelAnimationFrame||u.mozCancelAnimationFrame||u.oCancelAnimationFrame||function(e){u.clearTimeout(e)};n.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),d(l).off(".fb.touch"),e.requestId&&(m(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},n.prototype.ontouchstart=function(e){var t=this,n=d(e.target),o=t.instance,i=o.current,r=i.$slide,s=i.$content,a="touchstart"==e.type;a&&t.$container.off("mousedown.fb.touch"),e.originalEvent&&2==e.originalEvent.button||!r.length||!n.length||c(n)||c(n.parent())||!n.is("img")&&e.originalEvent.clientX>n[0].clientWidth+n.offset().left||(!i||o.isAnimating||i.$slide.hasClass("fancybox-animated")?(e.stopPropagation(),e.preventDefault()):(t.realPoints=t.startPoints=p(e),t.startPoints.length&&(i.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=n,t.$content=s,t.opts=i.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=o.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(r[0].clientWidth),t.canvasHeight=Math.round(r[0].clientHeight),t.contentLastPos=null,t.contentStartPos=d.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=d.fancybox.getTranslate(r),t.stagePos=d.fancybox.getTranslate(o.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,d(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",d.proxy(t,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",d.proxy(t,"ontouchmove")),d.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(n.is(t.$stage)||t.$stage.find(n).length)||(n.is(".fancybox-image")&&e.preventDefault(),d.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(t.isScrollable=h(n)||h(n.parent()),d.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!i.hasError||(t.canPan?(d.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===i.type&&(i.isLoaded||i.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,d.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-d(u).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-d(u).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=f(t.startPoints[0],t.startPoints[1]))))))},n.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(e){var t=this;void 0!==e.originalEvent.buttons&&0===e.originalEvent.buttons?t.ontouchend(e):t.isScrolling?t.canTap=!1:(t.newPoints=p(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=f(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=f(t.newPoints[0],t.startPoints[0],"y"),t.distance=f(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom())))},n.prototype.onSwipe=function(e){var t,i=this,r=i.instance,n=i.isSwiping,o=i.sliderStartPos.left||0;if(!0===n){if(10<Math.abs(i.distance)){if(i.canTap=!1,r.group.length<2&&i.opts.vertical?i.isSwiping="y":r.isDragging||!1===i.opts.vertical||"auto"===i.opts.vertical&&800<d(u).width()?i.isSwiping="x":(t=Math.abs(180*Math.atan2(i.distanceY,i.distanceX)/Math.PI),i.isSwiping=45<t&&t<135?"y":"x"),"y"===i.isSwiping&&d.fancybox.isMobile&&i.isScrollable)return void(i.isScrolling=!0);r.isDragging=i.isSwiping,i.startPoints=i.newPoints,d.each(r.slides,function(e,t){var n,o;d.fancybox.stop(t.$slide),n=d.fancybox.getTranslate(t.$slide),o=d.fancybox.getTranslate(r.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===r.current.pos&&(i.sliderStartPos.top=n.top-o.top,i.sliderStartPos.left=n.left-o.left),d.fancybox.setTranslate(t.$slide,{top:n.top-o.top,left:n.left-o.left})}),r.SlideShow&&r.SlideShow.isActive&&r.SlideShow.stop()}}else"x"==n&&(0<i.distanceX&&(i.instance.group.length<2||0===i.instance.current.index&&!i.instance.current.opts.loop)?o+=Math.pow(i.distanceX,.8):i.distanceX<0&&(i.instance.group.length<2||i.instance.current.index===i.instance.group.length-1&&!i.instance.current.opts.loop)?o-=Math.pow(-i.distanceX,.8):o+=i.distanceX),i.sliderLastPos={top:"x"==n?0:i.sliderStartPos.top+i.distanceY,left:o},i.requestId&&(m(i.requestId),i.requestId=null),i.requestId=g(function(){i.sliderLastPos&&(d.each(i.instance.slides,function(e,t){var n=t.pos-i.instance.currPos;d.fancybox.setTranslate(t.$slide,{top:i.sliderLastPos.top,left:i.sliderLastPos.left+n*i.canvasWidth+n*t.opts.gutter})}),i.$container.addClass("fancybox-is-sliding"))})},n.prototype.onPan=function(){var e=this;f(e.newPoints[0],e.realPoints[0])<(d.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&m(e.requestId),e.requestId=g(function(){d.fancybox.setTranslate(e.$content,e.contentLastPos)}))},n.prototype.limitMovement=function(){var e=this,t=e.canvasWidth,n=e.canvasHeight,o=e.distanceX,i=e.distanceY,e=e.contentStartPos,r=e.left,s=e.top,a=e.width,e=e.height,l=t<a?r+o:r,c=s+i,u=Math.max(0,.5*t-.5*a),d=Math.max(0,.5*n-.5*e),t=Math.min(t-a,.5*t-.5*a),a=Math.min(n-e,.5*n-.5*e);return 0<o&&u<l&&(l=u-1+Math.pow(-u+r+o,.8)||0),o<0&&l<t&&(l=t+1-Math.pow(t-r-o,.8)||0),0<i&&d<c&&(c=d-1+Math.pow(-d+s+i,.8)||0),{top:c=i<0&&c<a?a+1-Math.pow(a-s-i,.8)||0:c,left:l}},n.prototype.limitPosition=function(e,t,n,o){var i=this.canvasWidth,r=this.canvasHeight;return e=i<n?(e=0<e?0:e)<i-n?i-n:e:Math.max(0,i/2-n/2),{top:t=r<o?(t=0<t?0:t)<r-o?r-o:t:Math.max(0,r/2-o/2),left:e}},n.prototype.onZoom=function(){var e=this,t=e.contentStartPos,n=t.width,o=t.height,i=t.left,t=t.top,r=f(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,s=Math.floor(n*r),a=Math.floor(o*r),n=(n-s)*e.percentageOfImageAtPinchPointX,o=(o-a)*e.percentageOfImageAtPinchPointY,l=(e.newPoints[0].x+e.newPoints[1].x)/2-d(u).scrollLeft(),c=(e.newPoints[0].y+e.newPoints[1].y)/2-d(u).scrollTop(),l=l-e.centerPointStartX,t={top:t+(o+(c-e.centerPointStartY)),left:i+(n+l),scaleX:r,scaleY:r};e.canTap=!1,e.newWidth=s,e.newHeight=a,e.contentLastPos=t,e.requestId&&m(e.requestId),e.requestId=g(function(){d.fancybox.setTranslate(e.$content,e.contentLastPos)})},n.prototype.ontouchend=function(e){var t=this,n=t.isSwiping,o=t.isPanning,i=t.isZooming,r=t.isScrolling;if(t.endPoints=p(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),d(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(m(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,o?t.endPanning():i?t.endZooming():t.endSwiping(n,r)},n.prototype.endSwiping=function(e,t){var n=this,o=!1,i=n.instance.group.length,r=Math.abs(n.distanceX),i="x"==e&&1<i&&(130<n.dMs&&10<r||50<r);n.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(n.distanceY)?(d.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),o=n.instance.close(!0,250)):i&&0<n.distanceX?o=n.instance.previous(300):i&&n.distanceX<0&&(o=n.instance.next(300)),!1!==o||"x"!=e&&"y"!=e||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var e,t,n=this;n.contentLastPos&&(e=!1===n.opts.momentum||350<n.dMs?(t=n.contentLastPos.left,n.contentLastPos.top):(t=n.contentLastPos.left+500*n.velocityX,n.contentLastPos.top+500*n.velocityY),(t=n.limitPosition(t,e,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,t.height=n.contentStartPos.height,d.fancybox.animate(n.$content,t,366))},n.prototype.endZooming=function(){var e,t,n=this,o=n.instance.current,i=n.newWidth,r=n.newHeight;n.contentLastPos&&(e=n.contentLastPos.left,t=n.contentLastPos.top,d.fancybox.setTranslate(n.$content,{top:t,left:e,width:i,height:r,scaleX:1,scaleY:1}),i<n.canvasWidth&&r<n.canvasHeight?n.instance.scaleToFit(150):i>o.width||r>o.height?n.instance.scaleToActual(n.centerPointStartX,n.centerPointStartY,150):(o=n.limitPosition(e,t,i,r),d.fancybox.animate(n.$content,o,150)))},n.prototype.onTap=function(t){function e(e){if(e=s.opts[e],e=d.isFunction(e)?e.apply(r,[s,t]):e)switch(e){case"close":r.close(o.startEvent);break;case"toggleControls":r.toggleControls();break;case"next":r.next();break;case"nextOrClose":1<r.group.length?r.next():r.close(o.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(r.canPan()?r.scaleToFit():r.isScaledDown()?r.scaleToActual(l,c):r.group.length<2&&r.close(o.startEvent))}}var n,o=this,i=d(t.target),r=o.instance,s=r.current,a=t&&p(t)||o.startPoints,l=a[0]?a[0].x-d(u).scrollLeft()-o.stagePos.left:0,c=a[0]?a[0].y-d(u).scrollTop()-o.stagePos.top:0;if((!t.originalEvent||2!=t.originalEvent.button)&&(i.is("img")||!(l>i[0].clientWidth+i.offset().left))){if(i.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))n="Outside";else if(i.is(".fancybox-slide"))n="Slide";else{if(!r.current.$content||!r.current.$content.find(i).addBack().filter(i).length)return;n="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,50<Math.abs(l-o.tapX)||50<Math.abs(c-o.tapY))return this;e("dblclick"+n)}else o.tapX=l,o.tapY=c,s.opts["dblclick"+n]&&s.opts["dblclick"+n]!==s.opts["click"+n]?o.tapped=setTimeout(function(){o.tapped=null,r.isAnimating||e("click"+n)},500):e("click"+n);return this}},d(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new n(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(r,s){s.extend(!0,s.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function n(e){this.instance=e,this.init()}s.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,n=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!n?e.$button.hide():n.progress&&(e.$progress=s('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,n=t.instance,o=n.current;o&&(!0===e||o.opts.loop||n.currIndex<n.group.length-1)?t.isActive&&"video"!==o.contentType&&(t.$progress&&s.fancybox.animate(t.$progress.show(),{scaleX:1},o.opts.slideShow.speed),t.timer=setTimeout(function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)},o.opts.slideShow.speed)):(t.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),s(r).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,o){t=t&&t.SlideShow;o?t&&n.opts.slideShow.autoStart&&t.start():t&&t.isActive&&t.clear()},"afterShow.fb":function(e,t,n){t=t&&t.SlideShow;t&&t.isActive&&t.set()},"afterKeydown.fb":function(e,t,n,o,i){t=t&&t.SlideShow;!t||!n.opts.slideShow||80!==i&&32!==i||s(r.activeElement).is("button,a,input")||(o.preventDefault(),t.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){t=t&&t.SlideShow;t&&t.stop()}}),s(r).on("visibilitychange",function(){var e=s.fancybox.getInstance(),e=e&&e.SlideShow;e&&e.isActive&&(r.hidden?e.clear():e.set())})}(document,jQuery),function(r,n){var o,i=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},n=0;n<e.length;n++){var o=e[n];if(o&&o[1]in r){for(var i=0;i<o.length;i++)t[e[0][i]]=o[i];return t}}return!1}();i&&(o={request:function(e){(e=e||r.documentElement)[i.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){r[i.exitFullscreen]()},toggle:function(e){e=e||r.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(r[i.fullscreenElement])},enabled:function(){return Boolean(r[i.fullscreenEnabled])}},n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),n(r).on(i.fullscreenchange,function(){var e=o.isFullscreen(),t=n.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.isAnimating=!1,t.update(!0,!0,0),t.isComplete||t.complete()),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})),n(r).on({"onInit.fb":function(e,t){i?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),o.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&o.request(),t.FullScreen=o):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,n,o,i){t&&t.FullScreen&&70===i&&(o.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&o.exit()}})}(document,jQuery),function(e,r){function n(e){this.init(e)}var s="fancybox-thumbs",a=s+"-active";r.fancybox.defaults=r.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},r.fancybox.defaults);r.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,n=e.group,o=0;t.instance=e,t.opts=n[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var i=0,r=n.length;i<r&&(n[i].thumb&&o++,!(1<o));i++);1<o&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var n,e=this,t=e.instance,o=e.opts.parentEl,i=[];e.$grid||(e.$grid=r('<div class="'+s+" "+s+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(o).addBack().filter(o)),e.$grid.on("click","a",function(){t.jumpTo(r(this).attr("data-index"))})),e.$list||(e.$list=r('<div class="'+s+'__list">').appendTo(e.$grid)),r.each(t.group,function(e,t){(n=t.thumb)||"image"!==t.type||(n=t.src),i.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=i.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,n,o=this,i=o.$list,r=o.$grid;o.instance.current&&(n=(t=i.children().removeClass(a).filter('[data-index="'+o.instance.current.index+'"]').addClass(a)).position(),"y"===o.opts.axis&&(n.top<0||n.top>i.height()-t.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},e):"x"===o.opts.axis&&(n.left<r.scrollLeft()||n.left>r.scrollLeft()+(r.width()-t.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),r(e).on({"onInit.fb":function(e,t){t&&!t.Thumbs&&(t=new n(t)).isActive&&!0===t.opts.autoStart&&t.show()},"beforeShow.fb":function(e,t,n,o){t=t&&t.Thumbs;t&&t.isVisible&&t.focus(o?0:250)},"afterKeydown.fb":function(e,t,n,o,i){t=t&&t.Thumbs;t&&t.isActive&&71===i&&(o.preventDefault(),t.toggle())},"beforeClose.fb":function(e,t){t=t&&t.Thumbs;t&&t.isVisible&&!1!==t.opts.hideOnClose&&t.$grid.hide()}})}(document,jQuery),function(e,i){i.extend(!0,i.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),i(e).on("click","[data-fancybox-share]",function(){var e,t,n=i.fancybox.getInstance(),o=n.current||null;o&&("function"===i.type(o.opts.share.url)&&(e=o.opts.share.url.apply(o,[n,o])),o=o.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===o.type?encodeURIComponent(o.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return t[e]}))).replace(/\{\{descr\}\}/g,n.$caption?encodeURIComponent(n.$caption.text()):""),i.fancybox.open({src:n.translate(n,o),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){n.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(r,s,o){function i(){var e=r.location.hash.substr(1),t=e.split("-"),n=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:n<1?1:n,gallery:t.join("-")}}function t(e){""!==e.gallery&&o("[data-fancybox='"+o.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function a(e){return!!e&&(""!==(e=(e=(e.current||e).opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&e)}o.escapeSelector||(o.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),o(function(){!1!==o.fancybox.defaults.hash&&(o(s).on({"onInit.fb":function(e,t){var n,o;!1!==t.group[t.currIndex].opts.hash&&(n=i(),(o=a(t))&&n.gallery&&o==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(e,t,n,o){var i;n&&!1!==n.opts.hash&&(i=a(t))&&(t.currentHash=i+(1<t.group.length?"-"+(n.index+1):""),r.location.hash!=="#"+t.currentHash&&(o&&!t.origHash&&(t.origHash=r.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in r.history?(r.history[o?"pushState":"replaceState"]({},s.title,r.location.pathname+r.location.search+"#"+t.currentHash),o&&(t.hasCreatedHistory=!0)):r.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,n){n&&!1!==n.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?r.history.back():t.currentHash&&("replaceState"in r.history?r.history.replaceState({},s.title,r.location.pathname+r.location.search+(t.origHash||"")):r.location.hash=t.origHash),t.currentHash=null)}}),o(r).on("hashchange.fb",function(){var e=i(),n=null;o.each(o(".fancybox-container").get().reverse(),function(e,t){t=o(t).data("FancyBox");if(t&&t.currentHash)return n=t,!1}),n?n.currentHash===e.gallery+"-"+e.index||1===e.index&&n.currentHash==e.gallery||(n.currentHash=null,n.close()):""!==e.gallery&&t(e)}),setTimeout(function(){o.fancybox.getInstance()||t(i())},50))})}(window,document,jQuery),function(e,t){var i=(new Date).getTime();t(e).on({"onInit.fb":function(e,o,t){o.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=o.current,n=(new Date).getTime();o.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,n-i<250||(i=n,o[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery);var myMap,player,Modal=function(){function t(e){_classCallCheck(this,t),this.menu=document.querySelector(e)}return _createClass(t,[{key:"open",value:function(){this.menu.classList.add("fullscreen-menu--opened")}},{key:"close",value:function(){this.menu.classList.remove("fullscreen-menu--opened")}},{key:"setEventListener",value:function(){var t=this;document.addEventListener("click",function(e){var e=e.target.closest("[data-event]");e&&(e=e.dataset.event,t[e]())})}}]),t}(),menu=new Modal("#full-menu"),init=(menu.setEventListener(),console.log(menu),function(){myMap=new ymaps.Map("map",{center:[55.751047,37.599679],zoom:14,controls:[]});var t=new ymaps.GeoObjectCollection({},{draggable:!1,iconLayout:"default#image",iconImageHref:"./icons/marker.png",iconImageSize:[58,73],iconImageOffset:[-35,-52]});[[55.759797,37.580333],[55.754981,37.624434],[55.749981,37.604605],[55.74353,37.581991]].forEach(function(e){t.add(new ymaps.Placemark(e))}),myMap.geoObjects.add(t),myMap.behaviors.disable("scrollZoom")}),measureWidth=(ymaps.ready(init),function(e){var t=0,n=$(window).width(),o=e.closest(".menu-accordeon").find(".menu-accordeon__title"),o=o.width()*o.length,e=e.find(".menu-accordeon__container"),i=parseInt(e.css("padding-left")),e=parseInt(e.css("padding-right"));return{container:t=window.matchMedia("(max-width: 768px)").matches?n-o:530,textContainer:t-e-i}}),closeEveryItemInContainer=function(e){var t=e.find(".menu-accordeon__item"),e=e.find(".menu-accordeon__content");t.removeClass("active"),e.width(0)},open=function(e){var t=e.find(".menu-accordeon__content"),n=measureWidth(e),o=e.find(".menu-accordeon__container");e.addClass("active"),t.width(n.container),o.width(n.textContainer)},validateFields=($(".menu-accordeon__header").on("click",function(e){e.preventDefault();var e=$(e.currentTarget),t=e.closest(".menu-accordeon__item"),n=t.hasClass("active"),e=e.closest(".menu-accordeon");n?closeEveryItemInContainer(e):(closeEveryItemInContainer(e),open(t))}),function(e,t){return t.forEach(function(e){e.removeClass("input-error"),""===e.val().trim()&&e.addClass("input-error")}),0===e.find(".input-error").length}),sections=($(".form").submit(function(e){e.preventDefault();var e=$(e.currentTarget),t=e.find("[name='name']"),n=e.find("[name='phone']"),o=e.find("[name='comment']"),i=e.find("[name='to']"),r=$("#modal"),s=r.find(".modal__message");r.removeClass("error-modal"),validateFields(e,[t,n,o,i])&&$.ajax({url:"https://webdev-api.loftschool.com/sendmail",method:"post",data:{name:t.val(),phone:n.val(),comment:o.val(),to:i.val()},success:function(e){s.text(e.message),$.fancybox.open({src:"#modal",type:"inline"})},error:function(e){s.text("ÐÑÐ¸Ð±ÐºÐ° ÑÐµÑÐ²ÐµÑÐ°"),r.addClass("error-modal"),$.fancybox.open({src:"#modal",type:"inline"})}})}),$(".js-submit-btn").click(function(e){e.preventDefault(),$.fancybox.close()}),$("section")),display=$(".maincontent"),sideMenu=$(".fixed-menu"),menuItems=sideMenu.find(".fixed-menu__item"),mobileDetect=new MobileDetect(window.navigator.userAgent),isMobile=mobileDetect.mobile(),inScroll=!1,countSectionPosition=(sections.first().addClass("active"),function(e){e*=-100;return isNaN(e)?(console.error("ÐÐµÑÐµÐ´Ð°Ð½Ð¾ Ð½ÐµÐ²ÐµÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ Ð² countSectionPosition"),0):e}),changeMenuThemeOfSection=function(e){var t="fixed-menu--light";"white"===sections.eq(e).attr("data-sidemenu-theme")?sideMenu.addClass(t):sideMenu.removeClass(t)},resetActiveClassOfItem=function(e,t,n){e.eq(t).addClass(n).siblings().removeClass(n)},performTransition=function(e){var t;inScroll||(inScroll=!0,t=countSectionPosition(e),changeMenuThemeOfSection(e),display.css({transform:"translateY(".concat(t,"%)")}),resetActiveClassOfItem(sections,e,"active"),setTimeout(function(){inScroll=!1,resetActiveClassOfItem(menuItems,e,"fixed-menu__item--active")},1300))},viewportScroller=function(){var e=sections.filter(".active"),t=e.next(),n=e.prev();return{next:function(){t.length&&performTransition(t.index())},prev:function(){n.length&&performTransition(n.index())}}},playerContainer=($(window).on("wheel",function(e){var e=e.originalEvent.deltaY,t=viewportScroller();0<e&&t.next(),e<0&&t.prev()}),$(window).on("keydown",function(e){var t=e.target.tagName.toLowerCase(),t="input"===t||"textarea"===t,n=viewportScroller();if(!t)switch(e.keyCode){case 38:n.prev();break;case 40:n.next()}}),$(".wrapper").on("touchmove",function(e){return e.preventDefault()}),$("[data-scroll-to]").click(function(e){e.preventDefault();e=$(e.currentTarget).attr("data-scroll-to"),e=$("[data-section-id=".concat(e,"]"));performTransition(e.index())}),isMobile&&$("body").swipe({swipe:function(e,t){viewportScroller()["down"===t?"prev":"up"===t?"next":""]()}}),$(".player-container")),eventsInit=function(){$(".player__start").click(function(e){e.preventDefault(),playerContainer.hasClass("paused")?player.pauseVideo():player.playVideo()}),$(".player__playback").click(function(e){var t=$(e.currentTarget),e=e.originalEvent.layerX/t.width()*100,t=player.getDuration()/100*e;$(".player__playback-button").css({left:"".concat(e,"%")}),player.seekTo(t)}),$(".player__splash").click(function(e){player.playVideo()})},formatTime=function(e){var e=Math.round(e),t=n(Math.floor(e/60)),e=n(e-60*t);function n(e){return e<10?"0".concat(e):e}return"".concat(t," : ").concat(e)},onPlayerReady=function(){player.getDuration();setInterval(function(){player.getCurrentTime()},1e3)};function onYouTubeIframeAPIReady(){player=new YT.Player("yt-player",_defineProperty({height:"392",width:"662",videoId:"Dd1VIeTMGQs",playerVars:{playsinline:1},events:{onReady:onPlayerReady,onStateChange:onPlayerStateChange}},"playerVars",{controls:0,disablekb:0,showinfo:0,rel:0,autoplay:0,modestbranding:0}))}eventsInit();var video=document.querySelector(".player__video"),btn=document.querySelector(".player__start"),progress=document.querySelector(".player__playback-button"),volume=document.querySelector(".player__volume-bar"),mute=document.querySelector(".player__volume-mute"),seekslider=document.querySelector(".player__playback");function togglePlayPause(){video.paused?(video.play(),btn.removeClass("play"),btn.addClass("pause")):(video.pause(),btn.removeClass("pause"),btn.addClass("play"))}btn.addEventListener("click",togglePlayPause),video.addEventListener("timeupdate",function(){var e=video.currentTime/video.duration;progress.style.left=100*e+"%",video.ended&&(btn.className="play")}),volume.addEventListener("mousemove",function(e){video.volume=e.target.value}),mute.addEventListener("click",function(){video.muted=!video.muted}),seekslider.addEventListener("change",function(){var e=video.duration*(seekslider.value/100);video.currentTime=e});var slider=$(".products__list").bxSlider({pager:!1,controls:!1}),findBlockbyAlias=($(".products__slide-arrow--left").click(function(e){e.preventDefault(),slider.goToPrevSlide()}),$(".products__slide-arrow--right").click(function(e){e.preventDefault(),slider.goToNextSlide()}),function(n){return $(".reviews__item").filter(function(e,t){return $(t).attr("data-linked-with")===n})}),openItem=($(".interactive-avatar__link").click(function(e){e.preventDefault();var e=$(e.currentTarget),t=e.attr("data-open"),t=findBlockbyAlias(t),e=e.closest(".interactive-avatar");t.addClass("active").siblings().removeClass("active"),e.addClass("active").siblings().removeClass("active")}),function(e){var e=e.closest(".team__item"),t=e.find(".team__content"),n=t.find(".team__content-block").height();e.addClass("active"),t.height(n)}),closeEveryItem=function(e){var t=e.find(".team__content");e.find(".team__item").removeClass("active"),t.height(0)};$(".team__title").click(function(e){var e=$(e.currentTarget),t=e.closest(".team");e.closest(".team__item").hasClass("active")?closeEveryItem(t):(closeEveryItem(t),openItem(e))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
